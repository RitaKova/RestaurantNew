!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(C,t){"use strict";function g(t){return null!=t&&t===t.window}var e=[],n=Object.getPrototypeOf,a=e.slice,m=e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)},l=e.push,o=e.indexOf,i={},s=i.toString,v=i.hasOwnProperty,r=v.toString,c=r.call(Object),y={},b=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},S=C.document,d={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,n){var i,o,s=(n=n||S).createElement("script");if(s.text=t,e)for(i in d)(o=e[i]||e.getAttribute&&e.getAttribute(i))&&s.setAttribute(i,o);n.head.appendChild(s).parentNode.removeChild(s)}function h(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[s.call(t)]||"object":typeof t}var u="3.5.1",T=function(t,e){return new T.fn.init(t,e)};function p(t){var e=!!t&&"length"in t&&t.length,n=h(t);return!b(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}T.fn=T.prototype={jquery:u,constructor:T,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){t=T.merge(this.constructor(),t);return t.prevObject=this,t},each:function(t){return T.each(this,t)},map:function(n){return this.pushStack(T.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(T.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,t=+t+(t<0?e:0);return this.pushStack(0<=t&&t<e?[this[t]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},T.extend=T.fn.extend=function(){var t,e,n,i,o,s=arguments[0]||{},r=1,a=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[r]||{},r++),"object"==typeof s||b(s)||(s={}),r===a&&(s=this,r--);r<a;r++)if(null!=(t=arguments[r]))for(e in t)n=t[e],"__proto__"!==e&&s!==n&&(l&&n&&(T.isPlainObject(n)||(i=Array.isArray(n)))?(o=s[e],o=i&&!Array.isArray(o)?[]:i||T.isPlainObject(o)?o:{},i=!1,s[e]=T.extend(l,o,n)):void 0!==n&&(s[e]=n));return s},T.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){return!(!t||"[object Object]"!==s.call(t))&&(!(t=n(t))||"function"==typeof(t=v.call(t,"constructor")&&t.constructor)&&r.call(t)===c)},isEmptyObject:function(t){for(var e in t)return!1;return!0},globalEval:function(t,e,n){w(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,i=0;if(p(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},makeArray:function(t,e){e=e||[];return null!=t&&(p(Object(t))?T.merge(e,"string"==typeof t?[t]:t):l.call(e,t)),e},inArray:function(t,e,n){return null==e?-1:o.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,s=t.length,r=!n;o<s;o++)!e(t[o],o)!=r&&i.push(t[o]);return i},map:function(t,e,n){var i,o,s=0,r=[];if(p(t))for(i=t.length;s<i;s++)null!=(o=e(t[s],s,n))&&r.push(o);else for(s in t)null!=(o=e(t[s],s,n))&&r.push(o);return m(r)},guid:1,support:y}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=e[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){i["[object "+e+"]"]=e.toLowerCase()});var f=function(n){function u(t,e){return t="0x"+t.slice(1)-65536,e||(t<0?String.fromCharCode(65536+t):String.fromCharCode(t>>10|55296,1023&t|56320))}function i(){C()}var t,f,w,s,o,h,p,g,x,l,c,C,S,r,T,m,a,d,v,k="sizzle"+ +new Date,y=n.document,A=0,b=0,E=lt(),D=lt(),P=lt(),$=lt(),O=function(t,e){return t===e&&(c=!0),0},I={}.hasOwnProperty,e=[],N=e.pop,M=e.push,j=e.push,R=e.slice,F=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}"+H+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",q="\\["+H+"*("+B+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+H+"*\\]",_=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+q+")*)|.*)\\)|)",z=new RegExp(H+"+","g"),W=new RegExp("^"+H+"+|((?:^|[^\\\\])(?:\\\\.)*)"+H+"+$","g"),U=new RegExp("^"+H+"*,"+H+"*"),X=new RegExp("^"+H+"*([>+~]|"+H+")"+H+"*"),Y=new RegExp(H+"|>"),V=new RegExp(_),G=new RegExp("^"+B+"$"),K={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+q),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+H+"*(even|odd|(([+-]|)(\\d*)n|)"+H+"*(?:([+-]|)"+H+"*(\\d+)|))"+H+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+H+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+H+"*((?:-\\d)?\\d*)"+H+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,nt=/[+~]/,it=new RegExp("\\\\[\\da-fA-F]{1,6}"+H+"?|\\\\([^\\r\\n\\f])","g"),ot=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=yt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{j.apply(e=R.call(y.childNodes),y.childNodes),e[y.childNodes.length].nodeType}catch(t){j={apply:e.length?function(t,e){M.apply(t,R.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function at(e,t,n,i){var o,s,r,a,l,c,d,u=t&&t.ownerDocument,p=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==p&&9!==p&&11!==p)return n;if(!i&&(C(t),t=t||S,T)){if(11!==p&&(l=et.exec(e)))if(o=l[1]){if(9===p){if(!(r=t.getElementById(o)))return n;if(r.id===o)return n.push(r),n}else if(u&&(r=u.getElementById(o))&&v(t,r)&&r.id===o)return n.push(r),n}else{if(l[2])return j.apply(n,t.getElementsByTagName(e)),n;if((o=l[3])&&f.getElementsByClassName&&t.getElementsByClassName)return j.apply(n,t.getElementsByClassName(o)),n}if(f.qsa&&!$[e+" "]&&(!m||!m.test(e))&&(1!==p||"object"!==t.nodeName.toLowerCase())){if(d=e,u=t,1===p&&(Y.test(e)||X.test(e))){for((u=nt.test(e)&&gt(t.parentNode)||t)===t&&f.scope||((a=t.getAttribute("id"))?a=a.replace(ot,st):t.setAttribute("id",a=k)),s=(c=h(e)).length;s--;)c[s]=(a?"#"+a:":scope")+" "+vt(c[s]);d=c.join(",")}try{return j.apply(n,u.querySelectorAll(d)),n}catch(t){$(e,!0)}finally{a===k&&t.removeAttribute("id")}}}return g(e.replace(W,"$1"),t,n,i)}function lt(){var n=[];function i(t,e){return n.push(t+" ")>w.cacheLength&&delete i[n.shift()],i[t+" "]=e}return i}function ct(t){return t[k]=!0,t}function dt(t){var e=S.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function pt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ft(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ht(r){return ct(function(s){return s=+s,ct(function(t,e){for(var n,i=r([],t.length,s),o=i.length;o--;)t[n=i[o]]&&(t[n]=!(e[n]=t[n]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in f=at.support={},o=at.isXML=function(t){var e=t.namespaceURI,t=(t.ownerDocument||t).documentElement;return!Q.test(e||t&&t.nodeName||"HTML")},C=at.setDocument=function(t){var e,t=t?t.ownerDocument||t:y;return t!=S&&9===t.nodeType&&t.documentElement&&(r=(S=t).documentElement,T=!o(S),y!=S&&(e=S.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",i,!1):e.attachEvent&&e.attachEvent("onunload",i)),f.scope=dt(function(t){return r.appendChild(t).appendChild(S.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),f.attributes=dt(function(t){return t.className="i",!t.getAttribute("className")}),f.getElementsByTagName=dt(function(t){return t.appendChild(S.createComment("")),!t.getElementsByTagName("*").length}),f.getElementsByClassName=tt.test(S.getElementsByClassName),f.getById=dt(function(t){return r.appendChild(t).id=k,!S.getElementsByName||!S.getElementsByName(k).length}),f.getById?(w.filter.ID=function(t){var e=t.replace(it,u);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T){t=e.getElementById(t);return t?[t]:[]}}):(w.filter.ID=function(t){var e=t.replace(it,u);return function(t){t=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return t&&t.value===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n,i,o,s=e.getElementById(t);if(s){if((n=s.getAttributeNode("id"))&&n.value===t)return[s];for(o=e.getElementsByName(t),i=0;s=o[i++];)if((n=s.getAttributeNode("id"))&&n.value===t)return[s]}return[]}}),w.find.TAG=f.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):f.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,s=e.getElementsByTagName(t);if("*"!==t)return s;for(;n=s[o++];)1===n.nodeType&&i.push(n);return i},w.find.CLASS=f.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},a=[],m=[],(f.qsa=tt.test(S.querySelectorAll))&&(dt(function(t){var e;r.appendChild(t).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+H+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+H+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+k+"-]").length||m.push("~="),(e=S.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\["+H+"*name"+H+"*="+H+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+k+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")}),dt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=S.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+H+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),r.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(f.matchesSelector=tt.test(d=r.matches||r.webkitMatchesSelector||r.mozMatchesSelector||r.oMatchesSelector||r.msMatchesSelector))&&dt(function(t){f.disconnectedMatch=d.call(t,"*"),d.call(t,"[s!='']:x"),a.push("!=",_)}),m=m.length&&new RegExp(m.join("|")),a=a.length&&new RegExp(a.join("|")),e=tt.test(r.compareDocumentPosition),v=e||tt.test(r.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,e=e&&e.parentNode;return t===e||!(!e||1!==e.nodeType||!(n.contains?n.contains(e):t.compareDocumentPosition&&16&t.compareDocumentPosition(e)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},O=e?function(t,e){if(t===e)return c=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!f.sortDetached&&e.compareDocumentPosition(t)===n?t==S||t.ownerDocument==y&&v(y,t)?-1:e==S||e.ownerDocument==y&&v(y,e)?1:l?F(l,t)-F(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var n,i=0,o=t.parentNode,s=e.parentNode,r=[t],a=[e];if(!o||!s)return t==S?-1:e==S?1:o?-1:s?1:l?F(l,t)-F(l,e):0;if(o===s)return pt(t,e);for(n=t;n=n.parentNode;)r.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;r[i]===a[i];)i++;return i?pt(r[i],a[i]):r[i]==y?-1:a[i]==y?1:0}),S},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(C(t),f.matchesSelector&&T&&!$[e+" "]&&(!a||!a.test(e))&&(!m||!m.test(e)))try{var n=d.call(t,e);if(n||f.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){$(e,!0)}return 0<at(e,S,null,[t]).length},at.contains=function(t,e){return(t.ownerDocument||t)!=S&&C(t),v(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=S&&C(t);var n=w.attrHandle[e.toLowerCase()],n=n&&I.call(w.attrHandle,e.toLowerCase())?n(t,e,!T):void 0;return void 0!==n?n:f.attributes||!T?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},at.escape=function(t){return(t+"").replace(ot,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,n=[],i=0,o=0;if(c=!f.detectDuplicates,l=!f.sortStable&&t.slice(0),t.sort(O),c){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return l=null,t},s=at.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=s(e);return n},(w=at.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(it,u),t[3]=(t[3]||t[4]||t[5]||"").replace(it,u),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=h(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(it,u).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+H+")"+t+"("+H+"|$)"))&&E(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(t){t=at.attr(t,e);return null==t?"!="===n:!n||(t+="","="===n?t===i:"!="===n?t!==i:"^="===n?i&&0===t.indexOf(i):"*="===n?i&&-1<t.indexOf(i):"$="===n?i&&t.slice(-i.length)===i:"~="===n?-1<(" "+t.replace(z," ")+" ").indexOf(i):"|="===n&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,t,e,g,m){var v="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var i,o,s,r,a,l,c=v!=y?"nextSibling":"previousSibling",d=t.parentNode,u=b&&t.nodeName.toLowerCase(),p=!n&&!b,f=!1;if(d){if(v){for(;c;){for(r=t;r=r[c];)if(b?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&p){for(f=(a=(i=(o=(s=(r=d)[k]||(r[k]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]||[])[0]===A&&i[1])&&i[2],r=a&&d.childNodes[a];r=++a&&r&&r[c]||(f=a=0)||l.pop();)if(1===r.nodeType&&++f&&r===t){o[h]=[A,a,f];break}}else if(p&&(f=a=(i=(o=(s=(r=t)[k]||(r[k]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]||[])[0]===A&&i[1]),!1===f)for(;(r=++a&&r&&r[c]||(f=a=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++f||(p&&((o=(s=r[k]||(r[k]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]=[A,f]),r!==t)););return(f-=m)===g||f%g==0&&0<=f/g}}},PSEUDO:function(t,s){var e,r=w.pseudos[t]||w.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[k]?r(s):1<r.length?(e=[t,t,"",s],w.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,e){for(var n,i=r(t,s),o=i.length;o--;)t[n=F(t,i[o])]=!(e[n]=i[o])}):function(t){return r(t,0,e)}):r}},pseudos:{not:ct(function(t){var i=[],o=[],a=p(t.replace(W,"$1"));return a[k]?ct(function(t,e,n,i){for(var o,s=a(t,null,i,[]),r=t.length;r--;)(o=s[r])&&(t[r]=!(e[r]=o))}):function(t,e,n){return i[0]=t,a(i,null,n,o),i[0]=null,!o.pop()}}),has:ct(function(e){return function(t){return 0<at(e,t).length}}),contains:ct(function(e){return e=e.replace(it,u),function(t){return-1<(t.textContent||s(t)).indexOf(e)}}),lang:ct(function(n){return G.test(n||"")||at.error("unsupported lang: "+n),n=n.replace(it,u).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===r},focus:function(t){return t===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ft(!1),disabled:ft(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return Z.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(t=t.getAttribute("type"))||"text"===t.toLowerCase())},first:ht(function(){return[0]}),last:ht(function(t,e){return[e-1]}),eq:ht(function(t,e,n){return[n<0?n+e:n]}),even:ht(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:ht(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:ht(function(t,e,n){for(var i=n<0?n+e:e<n?e:n;0<=--i;)t.push(i);return t}),gt:ht(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[t]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in{submit:!0,reset:!0})w.pseudos[t]=function(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}(t);function mt(){}function vt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function yt(r,t,e){var a=t.dir,l=t.next,c=l||a,d=e&&"parentNode"===c,u=b++;return t.first?function(t,e,n){for(;t=t[a];)if(1===t.nodeType||d)return r(t,e,n);return!1}:function(t,e,n){var i,o,s=[A,u];if(n){for(;t=t[a];)if((1===t.nodeType||d)&&r(t,e,n))return!0}else for(;t=t[a];)if(1===t.nodeType||d)if(i=(o=t[k]||(t[k]={}))[t.uniqueID]||(o[t.uniqueID]={}),l&&l===t.nodeName.toLowerCase())t=t[a]||t;else{if((o=i[c])&&o[0]===A&&o[1]===u)return s[2]=o[2];if((i[c]=s)[2]=r(t,e,n))return!0}return!1}}function bt(o){return 1<o.length?function(t,e,n){for(var i=o.length;i--;)if(!o[i](t,e,n))return!1;return!0}:o[0]}function wt(t,e,n,i,o){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(n&&!n(s,i,o)||(r.push(s),c&&e.push(a)));return r}function xt(f,h,g,m,v,t){return m&&!m[k]&&(m=xt(m)),v&&!v[k]&&(v=xt(v,t)),ct(function(t,e,n,i){var o,s,r,a=[],l=[],c=e.length,d=t||function(t,e,n){for(var i=0,o=e.length;i<o;i++)at(t,e[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),u=!f||!t&&h?d:wt(d,a,f,n,i),p=g?v||(t?f:c||m)?[]:e:u;if(g&&g(u,p,n,i),m)for(o=wt(p,l),m(o,[],n,i),s=o.length;s--;)(r=o[s])&&(p[l[s]]=!(u[l[s]]=r));if(t){if(v||f){if(v){for(o=[],s=p.length;s--;)(r=p[s])&&o.push(u[s]=r);v(null,p=[],o,i)}for(s=p.length;s--;)(r=p[s])&&-1<(o=v?F(t,r):a[s])&&(t[o]=!(e[o]=r))}}else p=wt(p===e?p.splice(c,p.length):p),v?v(null,e,p,i):j.apply(e,p)})}function Ct(m,v){function t(t,e,n,i,o){var s,r,a,l=0,c="0",d=t&&[],u=[],p=x,f=t||b&&w.find.TAG("*",o),h=A+=null==p?1:Math.random()||.1,g=f.length;for(o&&(x=e==S||e||o);c!==g&&null!=(s=f[c]);c++){if(b&&s){for(r=0,e||s.ownerDocument==S||(C(s),n=!T);a=m[r++];)if(a(s,e||S,n)){i.push(s);break}o&&(A=h)}y&&((s=!a&&s)&&l--,t&&d.push(s))}if(l+=c,y&&c!==l){for(r=0;a=v[r++];)a(d,u,e,n);if(t){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=N.call(i));u=wt(u)}j.apply(i,u),o&&!t&&0<u.length&&1<l+v.length&&at.uniqueSort(i)}return o&&(A=h,x=p),d}var y=0<v.length,b=0<m.length;return y?ct(t):t}return mt.prototype=w.filters=w.pseudos,w.setFilters=new mt,h=at.tokenize=function(t,e){var n,i,o,s,r,a,l,c=D[t+" "];if(c)return e?0:c.slice(0);for(r=t,a=[],l=w.preFilter;r;){for(s in n&&!(i=U.exec(r))||(i&&(r=r.slice(i[0].length)||r),a.push(o=[])),n=!1,(i=X.exec(r))&&(n=i.shift(),o.push({value:n,type:i[0].replace(W," ")}),r=r.slice(n.length)),w.filter)!(i=K[s].exec(r))||l[s]&&!(i=l[s](i))||(n=i.shift(),o.push({value:n,type:s,matches:i}),r=r.slice(n.length));if(!n)break}return e?r.length:r?at.error(t):D(t,a).slice(0)},p=at.compile=function(t,e){var n,i=[],o=[],s=P[t+" "];if(!s){for(n=(e=e||h(t)).length;n--;)((s=function t(e){for(var i,n,o,s=e.length,r=w.relative[e[0].type],a=r||w.relative[" "],l=r?1:0,c=yt(function(t){return t===i},a,!0),d=yt(function(t){return-1<F(i,t)},a,!0),u=[function(t,e,n){return n=!r&&(n||e!==x)||((i=e).nodeType?c:d)(t,e,n),i=null,n}];l<s;l++)if(n=w.relative[e[l].type])u=[yt(bt(u),n)];else{if((n=w.filter[e[l].type].apply(null,e[l].matches))[k]){for(o=++l;o<s&&!w.relative[e[o].type];o++);return xt(1<l&&bt(u),1<l&&vt(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<o&&t(e.slice(l,o)),o<s&&t(e=e.slice(o)),o<s&&vt(e))}u.push(n)}return bt(u)}(e[n]))[k]?i:o).push(s);(s=P(t,Ct(o,i))).selector=t}return s},g=at.select=function(t,e,n,i){var o,s,r,a,l,c="function"==typeof t&&t,d=!i&&h(t=c.selector||t);if(n=n||[],1===d.length){if(2<(s=d[0]=d[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===e.nodeType&&T&&w.relative[s[1].type]){if(!(e=(w.find.ID(r.matches[0].replace(it,u),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=K.needsContext.test(t)?0:s.length;o--&&(r=s[o],!w.relative[a=r.type]);)if((l=w.find[a])&&(i=l(r.matches[0].replace(it,u),nt.test(s[0].type)&&gt(e.parentNode)||e))){if(s.splice(o,1),!(t=i.length&&vt(s)))return j.apply(n,i),n;break}}return(c||p(t,d))(i,e,!T,n,!e||nt.test(t)&&gt(e.parentNode)||e),n},f.sortStable=k.split("").sort(O).join("")===k,f.detectDuplicates=!!c,C(),f.sortDetached=dt(function(t){return 1&t.compareDocumentPosition(S.createElement("fieldset"))}),dt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ut("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),f.attributes&&dt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ut("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),dt(function(t){return null==t.getAttribute("disabled")})||ut(L,function(t,e,n){if(!n)return!0===t[e]?e.toLowerCase():(e=t.getAttributeNode(e))&&e.specified?e.value:null}),at}(C);T.find=f,T.expr=f.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=f.uniqueSort,T.text=f.getText,T.isXMLDoc=f.isXML,T.contains=f.contains,T.escapeSelector=f.escape;function x(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&T(t).is(n))break;i.push(t)}return i}function k(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}var A=T.expr.match.needsContext;function E(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(t,n,i){return b(n)?T.grep(t,function(t,e){return!!n.call(t,e,t)!==i}):n.nodeType?T.grep(t,function(t){return t===n!==i}):"string"!=typeof n?T.grep(t,function(t){return-1<o.call(n,t)!==i}):T.filter(n,t,i)}T.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?T.find.matchesSelector(i,t)?[i]:[]:T.find.matches(t,T.grep(e,function(t){return 1===t.nodeType}))},T.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(T(t).filter(function(){for(e=0;e<i;e++)if(T.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)T.find(t,o[e],n);return 1<i?T.uniqueSort(n):n},filter:function(t){return this.pushStack(P(this,t||[],!1))},not:function(t){return this.pushStack(P(this,t||[],!0))},is:function(t){return!!P(this,"string"==typeof t&&A.test(t)?T(t):t||[],!1).length}});var $,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,n){if(!t)return this;if(n=n||$,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):b(t)?void 0!==n.ready?n.ready(t):t(T):T.makeArray(t,this);if(!(i="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:O.exec(t))||!i[1]&&e)return(!e||e.jquery?e||n:this.constructor(e)).find(t);if(i[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:S,!0)),D.test(i[1])&&T.isPlainObject(e))for(var i in e)b(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(t=S.getElementById(i[2]))&&(this[0]=t,this.length=1),this}).prototype=T.fn,$=T(S);var I=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function M(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(T.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,o=this.length,s=[],r="string"!=typeof t&&T(t);if(!A.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(r?-1<r.index(n):1===n.nodeType&&T.find.matchesSelector(n,t))){s.push(n);break}return this.pushStack(1<s.length?T.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?o.call(T(t),this[0]):o.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){t=t.parentNode;return t&&11!==t.nodeType?t:null},parents:function(t){return x(t,"parentNode")},parentsUntil:function(t,e,n){return x(t,"parentNode",n)},next:function(t){return M(t,"nextSibling")},prev:function(t){return M(t,"previousSibling")},nextAll:function(t){return x(t,"nextSibling")},prevAll:function(t){return x(t,"previousSibling")},nextUntil:function(t,e,n){return x(t,"nextSibling",n)},prevUntil:function(t,e,n){return x(t,"previousSibling",n)},siblings:function(t){return k((t.parentNode||{}).firstChild,t)},children:function(t){return k(t.firstChild)},contents:function(t){return null!=t.contentDocument&&n(t.contentDocument)?t.contentDocument:(E(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},function(i,o){T.fn[i]=function(t,e){var n=T.map(this,o,t);return"Until"!==i.slice(-5)&&(e=t),e&&"string"==typeof e&&(n=T.filter(e,n)),1<this.length&&(N[i]||T.uniqueSort(n),I.test(i)&&n.reverse()),this.pushStack(n)}});var j=/[^\x20\t\r\n\f]+/g;function R(t){return t}function F(t){throw t}function L(t,e,n,i){var o;try{t&&b(o=t.promise)?o.call(t).done(e).fail(n):t&&b(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}T.Callbacks=function(i){var t,n;i="string"==typeof i?(t=i,n={},T.each(t.match(j)||[],function(t,e){n[e]=!0}),n):T.extend({},i);function o(){for(a=a||i.once,r=s=!0;c.length;d=-1)for(e=c.shift();++d<l.length;)!1===l[d].apply(e[0],e[1])&&i.stopOnFalse&&(d=l.length,e=!1);i.memory||(e=!1),s=!1,a&&(l=e?[]:"")}var s,e,r,a,l=[],c=[],d=-1,u={add:function(){return l&&(e&&!s&&(d=l.length-1,c.push(e)),function n(t){T.each(t,function(t,e){b(e)?i.unique&&u.has(e)||l.push(e):e&&e.length&&"string"!==h(e)&&n(e)})}(arguments),e&&!s&&o()),this},remove:function(){return T.each(arguments,function(t,e){for(var n;-1<(n=T.inArray(e,l,n));)l.splice(n,1),n<=d&&d--}),this},has:function(t){return t?-1<T.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||s||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),s||o()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},T.extend({Deferred:function(t){var s=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],o="pending",r={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var o=arguments;return T.Deferred(function(i){T.each(s,function(t,e){var n=b(o[e[4]])&&o[e[4]];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&b(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[e[0]+"With"](this,n?[t]:arguments)})}),o=null}).promise()},then:function(e,n,i){var l=0;function c(o,s,r,a){return function(){function t(){var t,e;if(!(o<l)){if((t=r.apply(n,i))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,b(e)?a?e.call(t,c(l,s,R,a),c(l,s,F,a)):(l++,e.call(t,c(l,s,R,a),c(l,s,F,a),c(l,s,R,s.notifyWith))):(r!==R&&(n=void 0,i=[t]),(a||s.resolveWith)(n,i))}}var n=this,i=arguments,e=a?t:function(){try{t()}catch(t){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(t,e.stackTrace),l<=o+1&&(r!==F&&(n=void 0,i=[t]),s.rejectWith(n,i))}};o?e():(T.Deferred.getStackHook&&(e.stackTrace=T.Deferred.getStackHook()),C.setTimeout(e))}}return T.Deferred(function(t){s[0][3].add(c(0,t,b(i)?i:R,t.notifyWith)),s[1][3].add(c(0,t,b(e)?e:R)),s[2][3].add(c(0,t,b(n)?n:F))}).promise()},promise:function(t){return null!=t?T.extend(t,r):r}},a={};return T.each(s,function(t,e){var n=e[2],i=e[5];r[e[1]]=n.add,i&&n.add(function(){o=i},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),n.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=n.fireWith}),r.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){o[e]=this,s[e]=1<arguments.length?a.call(arguments):t,--n||r.resolveWith(o,s)}}var n=arguments.length,i=n,o=Array(i),s=a.call(arguments),r=T.Deferred();if(n<=1&&(L(t,r.done(e(i)).resolve,r.reject,!n),"pending"===r.state()||b(s[i]&&s[i].then)))return r.then();for(;i--;)L(s[i],e(i),r.reject);return r.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){C.console&&C.console.warn&&t&&H.test(t.name)&&C.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){C.setTimeout(function(){throw t})};var B=T.Deferred();function q(){S.removeEventListener("DOMContentLoaded",q),C.removeEventListener("load",q),T.ready()}T.fn.ready=function(t){return B.then(t).catch(function(t){T.readyException(t)}),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0)!==t&&0<--T.readyWait||B.resolveWith(S,[T])}}),T.ready.then=B.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?C.setTimeout(T.ready):(S.addEventListener("DOMContentLoaded",q),C.addEventListener("load",q));var _=function(t,e,n,i,o,s,r){var a=0,l=t.length,c=null==n;if("object"===h(n))for(a in o=!0,n)_(t,e,a,n[a],!0,s,r);else if(void 0!==i&&(o=!0,b(i)||(r=!0),c&&(e=r?(e.call(t,i),null):(c=e,function(t,e,n){return c.call(T(t),n)})),e))for(;a<l;a++)e(t[a],n,r?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):s},z=/^-ms-/,W=/-([a-z])/g;function U(t,e){return e.toUpperCase()}function X(t){return t.replace(z,"ms-").replace(W,U)}function Y(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function V(){this.expando=T.expando+V.uid++}V.uid=1,V.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[X(e)]=n;else for(i in e)o[X(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in i?[e]:e.match(j)||[]).length;for(;n--;)delete i[e[n]]}void 0!==e&&!T.isEmptyObject(i)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){t=t[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var G=new V,K=new V,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(t,e,n){var i,o;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:Q.test(o)?JSON.parse(o):o)}catch(t){}K.set(t,e,n)}else n=void 0;return n}T.extend({hasData:function(t){return K.hasData(t)||G.hasData(t)},data:function(t,e,n){return K.access(t,e,n)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,n){return G.access(t,e,n)},_removeData:function(t,e){G.remove(t,e)}}),T.fn.extend({data:function(n,t){var e,i,o,s=this[0],r=s&&s.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){K.set(this,n)}):_(this,function(t){var e;return s&&void 0===t?void 0!==(e=K.get(s,n))||void 0!==(e=J(s,n))?e:void 0:void this.each(function(){K.set(this,n,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(o=K.get(s),1===s.nodeType&&!G.get(s,"hasDataAttrs"))){for(e=r.length;e--;)r[e]&&0===(i=r[e].name).indexOf("data-")&&(i=X(i.slice(5)),J(s,i,o[i]));G.set(s,"hasDataAttrs",!0)}return o},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),T.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=G.get(t,e),n&&(!i||Array.isArray(n)?i=G.access(t,e,T.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=T.queue(t,e),i=n.length,o=n.shift(),s=T._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete s.stop,o.call(t,function(){T.dequeue(t,e)},s)),!i&&s&&s.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return G.get(t,n)||G.access(t,n,{empty:T.Callbacks("once memory").add(function(){G.remove(t,[e+"queue",n])})})}}),T.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?T.queue(this[0],e):void 0===n?this:this.each(function(){var t=T.queue(this,e,n);T._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&T.dequeue(this,e)})},dequeue:function(t){return this.each(function(){T.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function n(){--o||s.resolveWith(r,[r])}var i,o=1,s=T.Deferred(),r=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(i=G.get(r[a],t+"queueHooks"))&&i.empty&&(o++,i.empty.add(n));return n(),s.promise(e)}});var tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,et=new RegExp("^(?:([+-])=|)("+tt+")([a-z%]*)$","i"),nt=["Top","Right","Bottom","Left"],it=S.documentElement,ot=function(t){return T.contains(t.ownerDocument,t)},st={composed:!0};it.getRootNode&&(ot=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(st)===t.ownerDocument});var rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&ot(t)&&"none"===T.css(t,"display")};function at(t,e,n,i){var o,s,r=20,a=i?function(){return i.cur()}:function(){return T.css(t,e,"")},l=a(),c=n&&n[3]||(T.cssNumber[e]?"":"px"),d=t.nodeType&&(T.cssNumber[e]||"px"!==c&&+l)&&et.exec(T.css(t,e));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)T.style(t,e,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;d*=2,T.style(t,e,d+c),n=n||[]}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=o)),o}var lt={};function ct(t,e){for(var n,i,o,s,r,a=[],l=0,c=t.length;l<c;l++)(i=t[l]).style&&(n=i.style.display,e?("none"===n&&(a[l]=G.get(i,"display")||null,a[l]||(i.style.display="")),""===i.style.display&&rt(i)&&(a[l]=(r=s=void 0,s=(o=i).ownerDocument,r=o.nodeName,(o=lt[r])||(s=s.body.appendChild(s.createElement(r)),o=T.css(s,"display"),s.parentNode.removeChild(s),"none"===o&&(o="block"),lt[r]=o)))):"none"!==n&&(a[l]="none",G.set(i,"display",n)));for(l=0;l<c;l++)null!=a[l]&&(t[l].style.display=a[l]);return t}T.fn.extend({show:function(){return ct(this,!0)},hide:function(){return ct(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?T(this).show():T(this).hide()})}});var dt=/^(?:checkbox|radio)$/i,ut=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pt=/^$|^module$|\/(?:java|ecma)script/i;u=S.createDocumentFragment().appendChild(S.createElement("div")),(f=S.createElement("input")).setAttribute("type","radio"),f.setAttribute("checked","checked"),f.setAttribute("name","t"),u.appendChild(f),y.checkClone=u.cloneNode(!0).cloneNode(!0).lastChild.checked,u.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!u.cloneNode(!0).lastChild.defaultValue,u.innerHTML="<option></option>",y.option=!!u.lastChild;var ft={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ht(t,e){var n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&E(t,e)?T.merge([t],n):n}function gt(t,e){for(var n=0,i=t.length;n<i;n++)G.set(t[n],"globalEval",!e||G.get(e[n],"globalEval"))}ft.tbody=ft.tfoot=ft.colgroup=ft.caption=ft.thead,ft.th=ft.td,y.option||(ft.optgroup=ft.option=[1,"<select multiple='multiple'>","</select>"]);var mt=/<|&#?\w+;/;function vt(t,e,n,i,o){for(var s,r,a,l,c,d=e.createDocumentFragment(),u=[],p=0,f=t.length;p<f;p++)if((s=t[p])||0===s)if("object"===h(s))T.merge(u,s.nodeType?[s]:s);else if(mt.test(s)){for(r=r||d.appendChild(e.createElement("div")),a=(ut.exec(s)||["",""])[1].toLowerCase(),a=ft[a]||ft._default,r.innerHTML=a[1]+T.htmlPrefilter(s)+a[2],c=a[0];c--;)r=r.lastChild;T.merge(u,r.childNodes),(r=d.firstChild).textContent=""}else u.push(e.createTextNode(s));for(d.textContent="",p=0;s=u[p++];)if(i&&-1<T.inArray(s,i))o&&o.push(s);else if(l=ot(s),r=ht(d.appendChild(s),"script"),l&&gt(r),n)for(c=0;s=r[c++];)pt.test(s.type||"")&&n.push(s);return d}var yt=/^key/,bt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,wt=/^([^.]*)(?:\.(.+)|)/;function xt(){return!0}function Ct(){return!1}function St(t,e){return t===function(){try{return S.activeElement}catch(t){}}()==("focus"===e)}function Tt(t,e,n,i,o,s){var r,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Tt(t,a,n,i,e[a],s);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=Ct;else if(!o)return t;return 1===s&&(r=o,(o=function(t){return T().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=T.guid++)),t.each(function(){T.event.add(this,e,o,i,n)})}function kt(t,o,s){s?(G.set(t,o,!1),T.event.add(t,o,{namespace:!1,handler:function(t){var e,n,i=G.get(this,o);if(1&t.isTrigger&&this[o]){if(i.length)(T.event.special[o]||{}).delegateType&&t.stopPropagation();else if(i=a.call(arguments),G.set(this,o,i),e=s(this,o),this[o](),i!==(n=G.get(this,o))||e?G.set(this,o,!1):n={},i!==n)return t.stopImmediatePropagation(),t.preventDefault(),n.value}else i.length&&(G.set(this,o,{value:T.event.trigger(T.extend(i[0],T.Event.prototype),i.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===G.get(t,o)&&T.event.add(t,o,xt)}T.event={global:{},add:function(e,t,n,i,o){var s,r,a,l,c,d,u,p,f,h=G.get(e);if(Y(e))for(n.handler&&(n=(s=n).handler,o=s.selector),o&&T.find.matchesSelector(it,o),n.guid||(n.guid=T.guid++),(a=h.events)||(a=h.events=Object.create(null)),(r=h.handle)||(r=h.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(j)||[""]).length;l--;)u=f=(c=wt.exec(t[l])||[])[1],p=(c[2]||"").split(".").sort(),u&&(d=T.event.special[u]||{},u=(o?d.delegateType:d.bindType)||u,d=T.event.special[u]||{},c=T.extend({type:u,origType:f,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&T.expr.match.needsContext.test(o),namespace:p.join(".")},s),(f=a[u])||((f=a[u]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,p,r)||e.addEventListener&&e.addEventListener(u,r)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,c):f.push(c),T.event.global[u]=!0)},remove:function(t,e,n,i,o){var s,r,a,l,c,d,u,p,f,h,g,m=G.hasData(t)&&G.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(j)||[""]).length;c--;)if(f=g=(a=wt.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(u=T.event.special[f]||{},p=l[f=(i?u.delegateType:u.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=p.length;s--;)d=p[s],!o&&g!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(s,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(t,d));r&&!p.length&&(u.teardown&&!1!==u.teardown.call(t,h,m.handle)||T.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)T.event.remove(t,f+e[c],n,i,!0);T.isEmptyObject(l)&&G.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,s,r=new Array(arguments.length),a=T.event.fix(t),l=(G.get(this,"events")||Object.create(null))[a.type]||[],t=T.event.special[a.type]||{};for(r[0]=a,e=1;e<arguments.length;e++)r[e]=arguments[e];if(a.delegateTarget=this,!t.preDispatch||!1!==t.preDispatch.call(this,a)){for(s=T.event.handlers.call(this,a,l),e=0;(i=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(o=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,r))&&!1===(a.result=o)&&(a.preventDefault(),a.stopPropagation()));return t.postDispatch&&t.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,o,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],r={},n=0;n<l;n++)void 0===r[o=(i=e[n]).selector+" "]&&(r[o]=i.needsContext?-1<T(o,this).index(c):T.find(o,this,null,[c]).length),r[o]&&s.push(i);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){t=this||t;return dt.test(t.type)&&t.click&&E(t,"input")&&kt(t,"click",xt),!1},trigger:function(t){t=this||t;return dt.test(t.type)&&t.click&&E(t,"input")&&kt(t,"click"),!0},_default:function(t){t=t.target;return dt.test(t.type)&&t.click&&E(t,"input")&&G.get(t,"click")||E(t,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?xt:Ct,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Ct,isPropagationStopped:Ct,isImmediatePropagationStopped:Ct,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=xt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=xt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=xt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&yt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&bt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},function(t,e){T.event.special[t]={setup:function(){return kt(this,t,St),!1},trigger:function(){return kt(this,t),!0},delegateType:e}}),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,o){T.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||T.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=o),e}}}),T.fn.extend({on:function(t,e,n,i){return Tt(this,t,e,n,i)},one:function(t,e,n,i){return Tt(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,T(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Ct),this.each(function(){T.event.remove(this,t,n,e)});for(o in t)this.off(o,e,t[o]);return this}});var At=/<script|<style|<link/i,Et=/checked\s*(?:[^=]|=\s*.checked.)/i,Dt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pt(t,e){return E(t,"table")&&E(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function $t(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ot(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function It(t,e){var n,i,o,s;if(1===e.nodeType){if(G.hasData(t)&&(s=G.get(t).events))for(o in G.remove(e,"handle events"),s)for(n=0,i=s[o].length;n<i;n++)T.event.add(e,o,s[o][n]);K.hasData(t)&&(t=K.access(t),t=T.extend({},t),K.set(e,t))}}function Nt(n,i,o,s){i=m(i);var t,e,r,a,l,c,d=0,u=n.length,p=u-1,f=i[0],h=b(f);if(h||1<u&&"string"==typeof f&&!y.checkClone&&Et.test(f))return n.each(function(t){var e=n.eq(t);h&&(i[0]=f.call(this,t,e.html())),Nt(e,i,o,s)});if(u&&(e=(t=vt(i,n[0].ownerDocument,!1,n,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(r=T.map(ht(t,"script"),$t)).length;d<u;d++)l=t,d!==p&&(l=T.clone(l,!0,!0),a&&T.merge(r,ht(l,"script"))),o.call(n[d],l,d);if(a)for(c=r[r.length-1].ownerDocument,T.map(r,Ot),d=0;d<a;d++)l=r[d],pt.test(l.type||"")&&!G.access(l,"globalEval")&&T.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&!l.noModule&&T._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):w(l.textContent.replace(Dt,""),l,c))}return n}function Mt(t,e,n){for(var i,o=e?T.filter(e,t):t,s=0;null!=(i=o[s]);s++)n||1!==i.nodeType||T.cleanData(ht(i)),i.parentNode&&(n&&ot(i)&&gt(ht(i,"script")),i.parentNode.removeChild(i));return t}T.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var i,o,s,r,a,l,c,d=t.cloneNode(!0),u=ot(t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(r=ht(d),i=0,o=(s=ht(t)).length;i<o;i++)a=s[i],l=r[i],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&dt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(n)for(s=s||ht(t),r=r||ht(d),i=0,o=s.length;i<o;i++)It(s[i],r[i]);else It(t,d);return 0<(r=ht(d,"script")).length&&gt(r,!u&&ht(t,"script")),d},cleanData:function(t){for(var e,n,i,o=T.event.special,s=0;void 0!==(n=t[s]);s++)if(Y(n)){if(e=n[G.expando]){if(e.events)for(i in e.events)o[i]?T.event.remove(n,i):T.removeEvent(n,i,e.handle);n[G.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),T.fn.extend({detach:function(t){return Mt(this,t,!0)},remove:function(t){return Mt(this,t)},text:function(t){return _(this,function(t){return void 0===t?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Nt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pt(this,t).appendChild(t)})},prepend:function(){return Nt(this,arguments,function(t){var e;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(e=Pt(this,t)).insertBefore(t,e.firstChild)})},before:function(){return Nt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Nt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(ht(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return T.clone(this,t,e)})},html:function(t){return _(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!At.test(t)&&!ft[(ut.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(T.cleanData(ht(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return Nt(this,arguments,function(t){var e=this.parentNode;T.inArray(this,n)<0&&(T.cleanData(ht(this)),e&&e.replaceChild(t,this))},n)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){T.fn[t]=function(t){for(var e,n=[],i=T(t),o=i.length-1,s=0;s<=o;s++)e=s===o?this:this.clone(!0),T(i[s])[r](e),l.apply(n,e.get());return this.pushStack(n)}});function jt(t,e,n){var i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in n=n.call(t),e)t.style[i]=o[i];return n}var Rt,Ft,Lt,Ht,Bt,qt,_t,zt,Wt=new RegExp("^("+tt+")(?!px)[a-z%]+$","i"),Ut=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=C),e.getComputedStyle(t)},Xt=new RegExp(nt.join("|"),"i");function Yt(){var t;zt&&(_t.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",zt.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",it.appendChild(_t).appendChild(zt),t=C.getComputedStyle(zt),Rt="1%"!==t.top,qt=12===Vt(t.marginLeft),zt.style.right="60%",Ht=36===Vt(t.right),Ft=36===Vt(t.width),zt.style.position="absolute",Lt=12===Vt(zt.offsetWidth/3),it.removeChild(_t),zt=null)}function Vt(t){return Math.round(parseFloat(t))}function Gt(t,e,n){var i,o,s=t.style;return(n=n||Ut(t))&&(""!==(o=n.getPropertyValue(e)||n[e])||ot(t)||(o=T.style(t,e)),!y.pixelBoxStyles()&&Wt.test(o)&&Xt.test(e)&&(i=s.width,t=s.minWidth,e=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=i,s.minWidth=t,s.maxWidth=e)),void 0!==o?o+"":o}function Kt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}_t=S.createElement("div"),(zt=S.createElement("div")).style&&(zt.style.backgroundClip="content-box",zt.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===zt.style.backgroundClip,T.extend(y,{boxSizingReliable:function(){return Yt(),Ft},pixelBoxStyles:function(){return Yt(),Ht},pixelPosition:function(){return Yt(),Rt},reliableMarginLeft:function(){return Yt(),qt},scrollboxSize:function(){return Yt(),Lt},reliableTrDimensions:function(){var t,e,n;return null==Bt&&(t=S.createElement("table"),n=S.createElement("tr"),e=S.createElement("div"),t.style.cssText="position:absolute;left:-11111px",n.style.height="1px",e.style.height="9px",it.appendChild(t).appendChild(n).appendChild(e),n=C.getComputedStyle(n),Bt=3<parseInt(n.height),it.removeChild(t)),Bt}}));var Qt=["Webkit","Moz","ms"],Zt=S.createElement("div").style,Jt={};function te(t){var e=T.cssProps[t]||Jt[t];return e||(t in Zt?t:Jt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Qt.length;n--;)if((t=Qt[n]+e)in Zt)return t}(t)||t)}var ee=/^(none|table(?!-c[ea]).+)/,ne=/^--/,ie={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"};function se(t,e,n){var i=et.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function re(t,e,n,i,o,s){var r="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;r<4;r+=2)"margin"===n&&(l+=T.css(t,n+nt[r],!0,o)),i?("content"===n&&(l-=T.css(t,"padding"+nt[r],!0,o)),"margin"!==n&&(l-=T.css(t,"border"+nt[r]+"Width",!0,o))):(l+=T.css(t,"padding"+nt[r],!0,o),"padding"!==n?l+=T.css(t,"border"+nt[r]+"Width",!0,o):a+=T.css(t,"border"+nt[r]+"Width",!0,o));return!i&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l}function ae(t,e,n){var i=Ut(t),o=(!y.boxSizingReliable()||n)&&"border-box"===T.css(t,"boxSizing",!1,i),s=o,r=Gt(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Wt.test(r)){if(!n)return r;r="auto"}return(!y.boxSizingReliable()&&o||!y.reliableTrDimensions()&&E(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===T.css(t,"display",!1,i))&&t.getClientRects().length&&(o="border-box"===T.css(t,"boxSizing",!1,i),(s=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+re(t,e,n||(o?"border":"content"),s,i,r)+"px"}function le(t,e,n,i,o){return new le.prototype.init(t,e,n,i,o)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){t=Gt(t,"opacity");return""===t?"1":t}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,r,a=X(e),l=ne.test(e),c=t.style;if(l||(e=te(a)),r=T.cssHooks[e]||T.cssHooks[a],void 0===n)return r&&"get"in r&&void 0!==(o=r.get(t,!1,i))?o:c[e];"string"===(s=typeof n)&&(o=et.exec(n))&&o[1]&&(n=at(t,e,o),s="number"),null!=n&&n==n&&("number"!==s||l||(n+=o&&o[3]||(T.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(n=r.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var o,s=X(e);return ne.test(e)||(e=te(s)),(s=T.cssHooks[e]||T.cssHooks[s])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=Gt(t,e,i)),"normal"===o&&e in oe&&(o=oe[e]),""===n||n?(e=parseFloat(o),!0===n||isFinite(e)?e||0:o):o}}),T.each(["height","width"],function(t,a){T.cssHooks[a]={get:function(t,e,n){if(e)return!ee.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ae(t,a,n):jt(t,ie,function(){return ae(t,a,n)})},set:function(t,e,n){var i,o=Ut(t),s=!y.scrollboxSize()&&"absolute"===o.position,r=(s||n)&&"border-box"===T.css(t,"boxSizing",!1,o),n=n?re(t,a,n,r,o):0;return r&&s&&(n-=Math.ceil(t["offset"+a[0].toUpperCase()+a.slice(1)]-parseFloat(o[a])-re(t,a,"border",!1,o)-.5)),n&&(i=et.exec(e))&&"px"!==(i[3]||"px")&&(t.style[a]=e,e=T.css(t,a)),se(0,e,n)}}}),T.cssHooks.marginLeft=Kt(y.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Gt(t,"marginLeft"))||t.getBoundingClientRect().left-jt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(o,s){T.cssHooks[o+s]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[o+nt[e]+s]=i[e]||i[e-2]||i[0];return n}},"margin"!==o&&(T.cssHooks[o+s].set=se)}),T.fn.extend({css:function(t,e){return _(this,function(t,e,n){var i,o,s={},r=0;if(Array.isArray(e)){for(i=Ut(t),o=e.length;r<o;r++)s[e[r]]=T.css(t,e[r],!1,i);return s}return void 0!==n?T.style(t,e,n):T.css(t,e)},t,e,1<arguments.length)}}),(T.Tween=le).prototype={constructor:le,init:function(t,e,n,i,o,s){this.elem=t,this.prop=n,this.easing=o||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=s||(T.cssNumber[n]?"":"px")},cur:function(){var t=le.propHooks[this.prop];return(t&&t.get?t:le.propHooks._default).get(this)},run:function(t){var e,n=le.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:le.propHooks._default).set(this),this}},le.prototype.init.prototype=le.prototype,le.propHooks={_default:{get:function(t){return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(t=T.css(t.elem,t.prop,""))&&"auto"!==t?t:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[te(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}},le.propHooks.scrollTop=le.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=le.prototype.init,T.fx.step={};var ce,de,ue=/^(?:toggle|show|hide)$/,pe=/queueHooks$/;function fe(){de&&(!1===S.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(fe):C.setTimeout(fe,T.fx.interval),T.fx.tick())}function he(){return C.setTimeout(function(){ce=void 0}),ce=Date.now()}function ge(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=nt[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function me(t,e,n){for(var i,o=(ve.tweeners[e]||[]).concat(ve.tweeners["*"]),s=0,r=o.length;s<r;s++)if(i=o[s].call(n,e,t))return i}function ve(o,t,e){var n,s,i=0,r=ve.prefilters.length,a=T.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var t=ce||he(),t=Math.max(0,c.startTime+c.duration-t),e=1-(t/c.duration||0),n=0,i=c.tweens.length;n<i;n++)c.tweens[n].run(e);return a.notifyWith(o,[c,e,t]),e<1&&i?t:(i||a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c]),!1)},c=a.promise({elem:o,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},e),originalProperties:t,originalOptions:e,startTime:ce||he(),duration:e.duration,tweens:[],createTween:function(t,e){t=T.Tween(o,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(t),t},stop:function(t){var e=0,n=t?c.tweens.length:0;if(s)return this;for(s=!0;e<n;e++)c.tweens[e].run(1);return t?(a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c,t])):a.rejectWith(o,[c,t]),this}}),d=c.props;for(!function(t,e){var n,i,o,s,r;for(n in t)if(o=e[i=X(n)],s=t[n],Array.isArray(s)&&(o=s[1],s=t[n]=s[0]),n!==i&&(t[i]=s,delete t[n]),(r=T.cssHooks[i])&&"expand"in r)for(n in s=r.expand(s),delete t[i],s)n in t||(t[n]=s[n],e[n]=o);else e[i]=o}(d,c.opts.specialEasing);i<r;i++)if(n=ve.prefilters[i].call(c,o,d,c.opts))return b(n.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return T.map(d,me,c),b(c.opts.start)&&c.opts.start.call(o,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(l,{elem:o,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(ve,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return at(n.elem,t,et.exec(e),n),n}]},tweener:function(t,e){for(var n,i=0,o=(t=b(t)?(e=t,["*"]):t.match(j)).length;i<o;i++)n=t[i],ve.tweeners[n]=ve.tweeners[n]||[],ve.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,s,r,a,l,c,d="width"in e||"height"in e,u=this,p={},f=t.style,h=t.nodeType&&rt(t),g=G.get(t,"fxshow");for(i in n.queue||(null==(r=T._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,u.always(function(){u.always(function(){r.unqueued--,T.queue(t,"fx").length||r.empty.fire()})})),e)if(o=e[i],ue.test(o)){if(delete e[i],s=s||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;h=!0}p[i]=g&&g[i]||T.style(t,i)}if((l=!T.isEmptyObject(e))||!T.isEmptyObject(p))for(i in d&&1===t.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=G.get(t,"display")),"none"===(d=T.css(t,"display"))&&(c?d=c:(ct([t],!0),c=t.style.display||c,d=T.css(t,"display"),ct([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===T.css(t,"float")&&(l||(u.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",u.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(h=g.hidden):g=G.access(t,"fxshow",{display:c}),s&&(g.hidden=!h),h&&ct([t],!0),u.done(function(){for(i in h||ct([t]),G.remove(t,"fxshow"),p)T.style(t,i,p[i])})),l=me(h?g[i]:0,i,u),i in g||(g[i]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ve.prefilters.unshift(t):ve.prefilters.push(t)}}),T.speed=function(t,e,n){var i=t&&"object"==typeof t?T.extend({},t):{complete:n||!n&&e||b(t)&&t,duration:t,easing:n&&e||e&&!b(e)&&e};return T.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in T.fx.speeds?i.duration=T.fx.speeds[i.duration]:i.duration=T.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){b(i.old)&&i.old.call(this),i.queue&&T.dequeue(this,i.queue)},i},T.fn.extend({fadeTo:function(t,e,n,i){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){var o=T.isEmptyObject(e),s=T.speed(t,n,i),i=function(){var t=ve(this,T.extend({},e),s);(o||G.get(this,"finish"))&&t.stop(!0)};return i.finish=i,o||!1===s.queue?this.each(i):this.queue(s.queue,i)},stop:function(o,t,s){function r(t){var e=t.stop;delete t.stop,e(s)}return"string"!=typeof o&&(s=t,t=o,o=void 0),t&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",n=T.timers,i=G.get(this);if(e)i[e]&&i[e].stop&&r(i[e]);else for(e in i)i[e]&&i[e].stop&&pe.test(e)&&r(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=o&&n[e].queue!==o||(n[e].anim.stop(s),t=!1,n.splice(e,1));!t&&s||T.dequeue(this,o)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=G.get(this),n=e[r+"queue"],i=e[r+"queueHooks"],o=T.timers,s=n?n.length:0;for(e.finish=!0,T.queue(this,r,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===r&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),T.each(["toggle","show","hide"],function(t,i){var o=T.fn[i];T.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(ge(i,!0),t,e,n)}}),T.each({slideDown:ge("show"),slideUp:ge("hide"),slideToggle:ge("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){T.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),T.timers=[],T.fx.tick=function(){var t,e=0,n=T.timers;for(ce=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||T.fx.stop(),ce=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){de||(de=!0,fe())},T.fx.stop=function(){de=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(i,t){return i=T.fx&&T.fx.speeds[i]||i,t=t||"fx",this.queue(t,function(t,e){var n=C.setTimeout(t,i);e.stop=function(){C.clearTimeout(n)}})},u=S.createElement("input"),tt=S.createElement("select").appendChild(S.createElement("option")),u.type="checkbox",y.checkOn=""!==u.value,y.optSelected=tt.selected,(u=S.createElement("input")).value="t",u.type="radio",y.radioValue="t"===u.value;var ye,be=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return _(this,T.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){T.removeAttr(this,t)})}}),T.extend({attr:function(t,e,n){var i,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?T.prop(t,e,n):(1===s&&T.isXMLDoc(t)||(o=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?ye:void 0)),void 0!==n?null===n?void T.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):!(o&&"get"in o&&null!==(i=o.get(t,e)))&&null==(i=T.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!y.radioValue&&"radio"===e&&E(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(j);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),ye={set:function(t,e,n){return!1===e?T.removeAttr(t,n):t.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(t,e){var r=be[e]||T.find.attr;be[e]=function(t,e,n){var i,o,s=e.toLowerCase();return n||(o=be[s],be[s]=i,i=null!=r(t,e,n)?s:null,be[s]=o),i}});var we=/^(?:input|select|textarea|button)$/i,xe=/^(?:a|area)$/i;function Ce(t){return(t.match(j)||[]).join(" ")}function Se(t){return t.getAttribute&&t.getAttribute("class")||""}function Te(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(j)||[]}T.fn.extend({prop:function(t,e){return _(this,T.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[T.propFix[t]||t]})}}),T.extend({prop:function(t,e,n){var i,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&T.isXMLDoc(t)||(e=T.propFix[e]||e,o=T.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||xe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(T.propHooks.selected={get:function(t){t=t.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(t){t=t.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(e){var t,n,i,o,s,r,a=0;if(b(e))return this.each(function(t){T(this).addClass(e.call(this,t,Se(this)))});if((t=Te(e)).length)for(;n=this[a++];)if(r=Se(n),i=1===n.nodeType&&" "+Ce(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(r=Ce(i))&&n.setAttribute("class",r)}return this},removeClass:function(e){var t,n,i,o,s,r,a=0;if(b(e))return this.each(function(t){T(this).removeClass(e.call(this,t,Se(this)))});if(!arguments.length)return this.attr("class","");if((t=Te(e)).length)for(;n=this[a++];)if(r=Se(n),i=1===n.nodeType&&" "+Ce(r)+" "){for(s=0;o=t[s++];)for(;-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");r!==(r=Ce(i))&&n.setAttribute("class",r)}return this},toggleClass:function(o,e){var s=typeof o,r="string"==s||Array.isArray(o);return"boolean"==typeof e&&r?e?this.addClass(o):this.removeClass(o):b(o)?this.each(function(t){T(this).toggleClass(o.call(this,t,Se(this),e),e)}):this.each(function(){var t,e,n,i;if(r)for(e=0,n=T(this),i=Te(o);t=i[e++];)n.hasClass(t)?n.removeClass(t):n.addClass(t);else void 0!==o&&"boolean"!=s||((t=Se(this))&&G.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",!t&&!1!==o&&G.get(this,"__className__")||""))})},hasClass:function(t){for(var e,n=0,i=" "+t+" ";e=this[n++];)if(1===e.nodeType&&-1<(" "+Ce(Se(e))+" ").indexOf(i))return!0;return!1}});var ke=/\r/g;T.fn.extend({val:function(e){var n,t,i,o=this[0];return arguments.length?(i=b(e),this.each(function(t){1===this.nodeType&&(null==(t=i?e.call(this,t,T(this).val()):e)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=T.map(t,function(t){return null==t?"":t+""})),(n=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):o?(n=T.valHooks[o.type]||T.valHooks[o.nodeName.toLowerCase()])&&"get"in n&&void 0!==(t=n.get(o,"value"))?t:"string"==typeof(t=o.value)?t.replace(ke,""):null==t?"":t:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:Ce(T.text(t))}},select:{get:function(t){for(var e,n=t.options,i=t.selectedIndex,o="select-one"===t.type,s=o?null:[],r=o?i+1:n.length,a=i<0?r:o?i:0;a<r;a++)if(((e=n[a]).selected||a===i)&&!e.disabled&&(!e.parentNode.disabled||!E(e.parentNode,"optgroup"))){if(e=T(e).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,o=t.options,s=T.makeArray(e),r=o.length;r--;)((i=o[r]).selected=-1<T.inArray(T.valHooks.option.get(i),s))&&(n=!0);return n||(t.selectedIndex=-1),s}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<T.inArray(T(t).val(),e)}},y.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),y.focusin="onfocusin"in C;function Ae(t){t.stopPropagation()}var Ee=/^(?:focusinfocus|focusoutblur)$/;T.extend(T.event,{trigger:function(t,e,n,i){var o,s,r,a,l,c,d,u=[n||S],p=v.call(t,"type")?t.type:t,f=v.call(t,"namespace")?t.namespace.split("."):[],h=d=s=n=n||S;if(3!==n.nodeType&&8!==n.nodeType&&!Ee.test(p+T.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),a=p.indexOf(":")<0&&"on"+p,(t=t[T.expando]?t:new T.Event(p,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:T.makeArray(e,[t]),c=T.event.special[p]||{},i||!c.trigger||!1!==c.trigger.apply(n,e))){if(!i&&!c.noBubble&&!g(n)){for(r=c.delegateType||p,Ee.test(r+p)||(h=h.parentNode);h;h=h.parentNode)u.push(h),s=h;s===(n.ownerDocument||S)&&u.push(s.defaultView||s.parentWindow||C)}for(o=0;(h=u[o++])&&!t.isPropagationStopped();)d=h,t.type=1<o?r:c.bindType||p,(l=(G.get(h,"events")||Object.create(null))[t.type]&&G.get(h,"handle"))&&l.apply(h,e),(l=a&&h[a])&&l.apply&&Y(h)&&(t.result=l.apply(h,e),!1===t.result&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(u.pop(),e)||!Y(n)||a&&b(n[p])&&!g(n)&&((s=n[a])&&(n[a]=null),T.event.triggered=p,t.isPropagationStopped()&&d.addEventListener(p,Ae),n[p](),t.isPropagationStopped()&&d.removeEventListener(p,Ae),T.event.triggered=void 0,s&&(n[a]=s)),t.result}},simulate:function(t,e,n){t=T.extend(new T.Event,n,{type:t,isSimulated:!0});T.event.trigger(t,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each(function(){T.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return T.event.trigger(t,e,n,!0)}}),y.focusin||T.each({focus:"focusin",blur:"focusout"},function(n,i){function o(t){T.event.simulate(i,t.target,T.event.fix(t))}T.event.special[i]={setup:function(){var t=this.ownerDocument||this.document||this,e=G.access(t,i);e||t.addEventListener(n,o,!0),G.access(t,i,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,e=G.access(t,i)-1;e?G.access(t,i,e):(t.removeEventListener(n,o,!0),G.remove(t,i))}}});var De=C.location,Pe={guid:Date.now()},$e=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new C.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var Oe=/\[\]$/,Ie=/\r?\n/g,Ne=/^(?:submit|button|image|reset|file)$/i,Me=/^(?:input|select|textarea|keygen)/i;T.param=function(t,e){function n(t,e){e=b(e)?e():e,o[o.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==e?"":e)}var i,o=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,function(){n(this.name,this.value)});else for(i in t)!function n(i,t,o,s){if(Array.isArray(t))T.each(t,function(t,e){o||Oe.test(i)?s(i,e):n(i+"["+("object"==typeof e&&null!=e?t:"")+"]",e,o,s)});else if(o||"object"!==h(t))s(i,t);else for(var e in t)n(i+"["+e+"]",t[e],o,s)}(i,t[i],e,n);return o.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&Me.test(this.nodeName)&&!Ne.test(t)&&(this.checked||!dt.test(t))}).map(function(t,e){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,function(t){return{name:e.name,value:t.replace(Ie,"\r\n")}}):{name:e.name,value:n.replace(Ie,"\r\n")}}).get()}});var je=/%20/g,Re=/#.*$/,Fe=/([?&])_=[^&]*/,Le=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:GET|HEAD)$/,Be=/^\/\//,qe={},_e={},ze="*/".concat("*"),We=S.createElement("a");function Ue(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,o=t.toLowerCase().match(j)||[];if(b(e))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(s[n]=s[n]||[]).unshift(e)):(s[n]=s[n]||[]).push(e)}}function Xe(e,i,o,s){var r={},a=e===_e;function l(t){var n;return r[t]=!0,T.each(e[t]||[],function(t,e){e=e(i,o,s);return"string"!=typeof e||a||r[e]?a?!(n=e):void 0:(i.dataTypes.unshift(e),l(e),!1)}),n}return l(i.dataTypes[0])||!r["*"]&&l("*")}function Ye(t,e){var n,i,o=T.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i=i||{})[n]=e[n]);return i&&T.extend(!0,t,i),t}We.href=De.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:De.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(De.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ye(Ye(t,T.ajaxSettings),e):Ye(T.ajaxSettings,t)},ajaxPrefilter:Ue(qe),ajaxTransport:Ue(_e),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var l,c,d,n,u,i,p,f,o,h=T.ajaxSetup({},e),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?T(g):T.event,v=T.Deferred(),y=T.Callbacks("once memory"),b=h.statusCode||{},s={},r={},a="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(p){if(!n)for(n={};e=Le.exec(d);)n[e[1].toLowerCase()+" "]=(n[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=n[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return p?d:null},setRequestHeader:function(t,e){return null==p&&(t=r[t.toLowerCase()]=r[t.toLowerCase()]||t,s[t]=e),this},overrideMimeType:function(t){return null==p&&(h.mimeType=t),this},statusCode:function(t){if(t)if(p)w.always(t[w.status]);else for(var e in t)b[e]=[b[e],t[e]];return this},abort:function(t){t=t||a;return l&&l.abort(t),x(0,t),this}};if(v.promise(w),h.url=((t||h.url||De.href)+"").replace(Be,De.protocol+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(j)||[""],null==h.crossDomain){i=S.createElement("a");try{i.href=h.url,i.href=i.href,h.crossDomain=We.protocol+"//"+We.host!=i.protocol+"//"+i.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=T.param(h.data,h.traditional)),Xe(qe,h,e,w),p)return w;for(o in(f=T.event&&h.global)&&0==T.active++&&T.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!He.test(h.type),c=h.url.replace(Re,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(je,"+")):(t=h.url.slice(c.length),h.data&&(h.processData||"string"==typeof h.data)&&(c+=($e.test(c)?"&":"?")+h.data,delete h.data),!1===h.cache&&(c=c.replace(Fe,"$1"),t=($e.test(c)?"&":"?")+"_="+Pe.guid+++t),h.url=c+t),h.ifModified&&(T.lastModified[c]&&w.setRequestHeader("If-Modified-Since",T.lastModified[c]),T.etag[c]&&w.setRequestHeader("If-None-Match",T.etag[c])),(h.data&&h.hasContent&&!1!==h.contentType||e.contentType)&&w.setRequestHeader("Content-Type",h.contentType),w.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+ze+"; q=0.01":""):h.accepts["*"]),h.headers)w.setRequestHeader(o,h.headers[o]);if(h.beforeSend&&(!1===h.beforeSend.call(g,w,h)||p))return w.abort();if(a="abort",y.add(h.complete),w.done(h.success),w.fail(h.error),l=Xe(_e,h,e,w)){if(w.readyState=1,f&&m.trigger("ajaxSend",[w,h]),p)return w;h.async&&0<h.timeout&&(u=C.setTimeout(function(){w.abort("timeout")},h.timeout));try{p=!1,l.send(s,x)}catch(t){if(p)throw t;x(-1,t)}}else x(-1,"No Transport");function x(t,e,n,i){var o,s,r,a=e;p||(p=!0,u&&C.clearTimeout(u),l=void 0,d=i||"",w.readyState=0<t?4:0,i=200<=t&&t<300||304===t,n&&(r=function(t,e,n){for(var i,o,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)s=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}r=r||o}s=s||r}if(s)return s!==l[0]&&l.unshift(s),n[s]}(h,w,n)),!i&&-1<T.inArray("script",h.dataTypes)&&(h.converters["text script"]=function(){}),r=function(t,e,n,i){var o,s,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=d.shift();s;)if(t.responseFields[s]&&(n[t.responseFields[s]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if(a=o.split(" "),a[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(h,r,w,i),i?(h.ifModified&&((n=w.getResponseHeader("Last-Modified"))&&(T.lastModified[c]=n),(n=w.getResponseHeader("etag"))&&(T.etag[c]=n)),204===t||"HEAD"===h.type?a="nocontent":304===t?a="notmodified":(a=r.state,o=r.data,i=!(s=r.error))):(s=a,!t&&a||(a="error",t<0&&(t=0))),w.status=t,w.statusText=(e||a)+"",i?v.resolveWith(g,[o,a,w]):v.rejectWith(g,[w,a,s]),w.statusCode(b),b=void 0,f&&m.trigger(i?"ajaxSuccess":"ajaxError",[w,h,i?o:s]),y.fireWith(g,[w,a]),f&&(m.trigger("ajaxComplete",[w,h]),--T.active||T.event.trigger("ajaxStop")))}return w},getJSON:function(t,e,n){return T.get(t,e,n,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],function(t,o){T[o]=function(t,e,n,i){return b(e)&&(i=i||n,n=e,e=void 0),T.ajax(T.extend({url:t,type:o,dataType:i,data:e,success:n},T.isPlainObject(t)&&t))}}),T.ajaxPrefilter(function(t){for(var e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),T._evalUrl=function(t,e,n){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e,n)}})},T.fn.extend({wrapAll:function(t){return this[0]&&(b(t)&&(t=t.call(this[0])),t=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(t){T(this).wrapInner(n.call(this,t))}):this.each(function(){var t=T(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=b(e);return this.each(function(t){T(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(t){}};var Ve={0:200,1223:204},Ge=T.ajaxSettings.xhr();y.cors=!!Ge&&"withCredentials"in Ge,y.ajax=Ge=!!Ge,T.ajaxTransport(function(o){var s,r;if(y.cors||Ge&&!o.crossDomain)return{send:function(t,e){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)i.setRequestHeader(n,t[n]);s=function(t){return function(){s&&(s=r=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===t?i.abort():"error"===t?"number"!=typeof i.status?e(0,"error"):e(i.status,i.statusText):e(Ve[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=s(),r=i.onerror=i.ontimeout=s("error"),void 0!==i.onabort?i.onabort=r:i.onreadystatechange=function(){4===i.readyState&&C.setTimeout(function(){s&&r()})},s=s("abort");try{i.send(o.hasContent&&o.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),T.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),T.ajaxTransport("script",function(n){var i,o;if(n.crossDomain||n.scriptAttrs)return{send:function(t,e){i=T("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(t){i.remove(),o=null,t&&e("error"===t.type?404:200,t.type)}),S.head.appendChild(i[0])},abort:function(){o&&o()}}});var Ke=[],Qe=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ke.pop()||T.expando+"_"+Pe.guid++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",function(t,e,n){var i,o,s,r=!1!==t.jsonp&&(Qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qe.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=b(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(Qe,"$1"+i):!1!==t.jsonp&&(t.url+=($e.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||T.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=C[i],C[i]=function(){s=arguments},n.always(function(){void 0===o?T(C).removeProp(i):C[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ke.push(i)),s&&b(o)&&o(s[0]),s=o=void 0}),"script"}),y.createHTMLDocument=((u=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===u.childNodes.length),T.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(y.createHTMLDocument?((i=(e=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,e.head.appendChild(i)):e=S),i=!n&&[],(n=D.exec(t))?[e.createElement(n[1])]:(n=vt([t],e,i),i&&i.length&&T(i).remove(),T.merge([],n.childNodes)));var i},T.fn.load=function(t,e,n){var i,o,s,r=this,a=t.indexOf(" ");return-1<a&&(i=Ce(t.slice(a)),t=t.slice(0,a)),b(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),0<r.length&&T.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(i?T("<div>").append(T.parseHTML(t)).find(i):t)}).always(n&&function(t,e){r.each(function(){n.apply(this,s||[t.responseText,e,t])})}),this},T.expr.pseudos.animated=function(e){return T.grep(T.timers,function(t){return e===t.elem}).length},T.offset={setOffset:function(t,e,n){var i,o,s,r,a=T.css(t,"position"),l=T(t),c={};"static"===a&&(t.style.position="relative"),s=l.offset(),i=T.css(t,"top"),r=T.css(t,"left"),r=("absolute"===a||"fixed"===a)&&-1<(i+r).indexOf("auto")?(o=(a=l.position()).top,a.left):(o=parseFloat(i)||0,parseFloat(r)||0),b(e)&&(e=e.call(t,n,T.extend({},s))),null!=e.top&&(c.top=e.top-s.top+o),null!=e.left&&(c.left=e.left-s.left+r),"using"in e?e.using.call(t,c):("number"==typeof c.top&&(c.top+="px"),"number"==typeof c.left&&(c.left+="px"),l.css(c))}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){T.offset.setOffset(this,e,t)});var t,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],o={top:0,left:0};if("fixed"===T.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((o=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),o.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-T.css(i,"marginTop",!0),left:e.left-o.left-T.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||it})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var s="pageYOffset"===o;T.fn[e]=function(t){return _(this,function(t,e,n){var i;return g(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===n?i?i[o]:t[e]:void(i?i.scrollTo(s?i.pageXOffset:n,s?n:i.pageYOffset):t[e]=n)},e,t,arguments.length)}}),T.each(["top","left"],function(t,n){T.cssHooks[n]=Kt(y.pixelPosition,function(t,e){if(e)return e=Gt(t,n),Wt.test(e)?T(t).position()[n]+"px":e})}),T.each({Height:"height",Width:"width"},function(r,a){T.each({padding:"inner"+r,content:a,"":"outer"+r},function(i,s){T.fn[s]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),o=i||(!0===t||!0===e?"margin":"border");return _(this,function(t,e,n){var i;return g(t)?0===s.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+r],i["scroll"+r],t.body["offset"+r],i["offset"+r],i["client"+r])):void 0===n?T.css(t,e,o):T.style(t,e,n,o)},a,n?t:void 0,n)}})}),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){T.fn[e]=function(t){return this.on(e,t)}}),T.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){T.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}});var Ze=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(t,e){var n,i;if("string"==typeof e&&(i=t[e],e=t,t=i),b(t))return n=a.call(arguments,2),(i=function(){return t.apply(e||this,n.concat(a.call(arguments)))}).guid=t.guid=t.guid||T.guid++,i},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=E,T.isFunction=b,T.isWindow=g,T.camelCase=X,T.type=h,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},T.trim=function(t){return null==t?"":(t+"").replace(Ze,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return T});var Je=C.jQuery,tn=C.$;return T.noConflict=function(t){return C.$===T&&(C.$=tn),t&&C.jQuery===T&&(C.jQuery=Je),T},void 0===t&&(C.jQuery=C.$=T),T}),function(p){"use strict";var f=null,h=null;!function(){for(var o,s,r,a,t=["webkit","moz","o","ms"],e=p.document.createElement("div"),n=-1,n=0;n<t.length&&!p.requestAnimationFrame;n++)p.requestAnimationFrame=p[t[n]+"RequestAnimationFrame"];function i(){}void 0===e.nextElementSibling&&Object.defineProperty(p.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(e=p.Element.prototype).matches=e.matches||e.machesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(o=Object.prototype.hasOwnProperty,s=[],r=!{toString:null}.propertyIsEnumerable("toString"),a=(s=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],n="",i=-1;if("object"!=typeof t&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(n in t)o.call(t,n)&&e.push(n);if(r)for(i=0;i<a;i++)o.call(t,s[i])&&e.push(s[i]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");i.prototype=t||{};var n=new i;return i.prototype=null,void 0!==e&&Object.defineProperties(n,e),null===t&&(n.__proto__=null),n}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,n,i,o;if(null===this)throw new TypeError;if(0==(o=(i=Object(this)).length>>>0))return-1;if(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),o<=e)return-1;for(n=0<=e?e:Math.max(o-Math.abs(e),0);n<o;n++)if(n in i&&i[n]===t)return n;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,n,i,o;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),i=function(){},o=function(){return n.apply(this instanceof i?this:t,e.concat(Array.prototype.slice.call(arguments)))},(n=this).prototype&&(i.prototype=this.prototype),o.prototype=new i,o}),p.Element.prototype.dispatchEvent||(p.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}})}(),(f=function(t,e,n){var i,o=null,s=!1,r=null,a=null,l=[],c="",d=[],u=-1,a=n||p.document;if((s=arguments[3])&&(s="boolean"==typeof s),"string"==typeof t)d=a.querySelectorAll(t);else if(t&&"object"==typeof t&&h.isElement(t,a))d=[t];else{if(!t||"object"!=typeof t||!t.length)throw new Error(f.messages.errorFactoryInvalidContainer());d=t}if(d.length<1)throw new Error(f.messages.errorFactoryContainerNotFound());for(u=0;(o=d[u])&&(!(0<u)||s);u++)o.id?c=o.id:(c="MixItUp"+h.randomHex(),o.id=c),f.instances[c]instanceof f.Mixer?(r=f.instances[c],(!e||e&&e.debug&&!1!==e.debug.showWarnings)&&console.warn(f.messages.warningFactoryPreexistingInstance())):((r=new f.Mixer).attach(o,a,c,e),f.instances[c]=r),i=new f.Facade(r),e&&e.debug&&e.debug.enable?l.push(r):l.push(i);return s?new f.Collection(l):l[0]}).use=function(t){f.Base.prototype.callActions.call(f,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===f.extensions[t.NAME]&&(t(f),f.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(f.libraries.$=t),f.Base.prototype.callActions.call(f,"afterUse",arguments)},f.instances={},f.extensions={},f.libraries={},h={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){this.hasClass(t,e)&&(e=new RegExp("(\\s|^)"+e+"(\\s|$)"),t.className=t.className.replace(e," ").trim())},extend:function(e,t,n,i){var o,s=[],r=-1;n=n||!1,i=i||!1;try{if(Array.isArray(t))for(r=0;r<t.length;r++)s.push(r);else t&&(s=Object.keys(t));for(r=0;r<s.length;r++)o=s[r],!n||"object"!=typeof t[o]||this.isElement(t[o])?e[o]=t[o]:(Array.isArray(t[o])?e[o]||(e[o]=[]):e[o]||(e[o]={}),this.extend(e[o],t[o],n,i))}catch(t){if(!i)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var n,i=null,o="",s="",r="",a="",l=-1,c=-1;if(t instanceof TypeError&&(i=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(a in o=i[1],e){for(c=0;c<o.length&&o.charAt(c)===a.charAt(c);)c++;l<c&&(l=c,r=a)}throw 1<l&&(s=f.messages.errorConfigInvalidPropertySuggestion({probableMatch:r})),n=f.messages.errorConfigInvalidProperty({erroneous:o,suggestion:s}),new TypeError(n)}throw t},template:function(i){for(var t,e=/\${([\w]*)}/g,o={};t=e.exec(i);)o[t[1]]=new RegExp("\\${"+t[1]+"}","g");return function(t){var e="",n=i;for(e in t=t||{},o)n=n.replace(o[e],void 0!==t[e]?t[e]:"");return n}},on:function(t,e,n,i){t&&(t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&(t["e"+e+n]=n,t[e+n]=function(){t["e"+e+n](p.event)},t.attachEvent("on"+e,t[e+n])))},off:function(t,e,n){t&&(t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+n]),t[e+n]=null))},getCustomEvent:function(t,e,n){var i=null;return n=n||p.document,"function"==typeof p.CustomEvent?i=new p.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof n.createEvent?(i=n.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((i=n.createEventObject()).type=t,i.returnValue=!1,i.cancelBubble=!1,i.detail=e),i},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var n=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++n;return n},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||p.document,!!(p.HTMLElement&&t instanceof p.HTMLElement)||(!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName)},createElement:function(t,e){var n=null,i=null,n=(e=e||p.document).createDocumentFragment();for((i=e.createElement("div")).innerHTML=t.trim();i.firstChild;)n.appendChild(i.firstChild);return n},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var n=t.length;if(n!==e.length)return!1;for(;n--;)if(t[n]!==e[n])return!1;return!0},deepEquals:function(t,e){if("object"==typeof t&&t&&"object"==typeof e&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(!e.hasOwnProperty(n)||!this.deepEquals(t[n],e[n]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e,n,i=t.slice(),o=i.length,s=o;s--;)e=~~(Math.random()*o),n=i[s],i[s]=i[e],i[e]=n;return i},arrayFromList:function(e){var n,i;try{return Array.prototype.slice.call(e)}catch(t){for(n=[],i=0;i<e.length;i++)n.push(e[i]);return n}},debounce:function(o,s,r){var a;return function(){var t=this,e=arguments,n=r&&!a,i=function(){a=null,r||o.apply(t,e)};clearTimeout(a),a=setTimeout(i,s),n&&o.apply(t,e)}},position:function(t){for(var e=0,n=0,i=t;t;)e-=t.scrollLeft,n-=t.scrollTop,t===i&&(e+=t.offsetLeft,n+=t.offsetTop,i=t.offsetParent),t=t.parentElement;return{x:e,y:n}},getHypotenuse:function(t,e){var n=(n=t.x-e.x)<0?-1*n:n,e=(e=t.y-e.y)<0?-1*e:e;return Math.sqrt(Math.pow(n,2)+Math.pow(e,2))},getIntersectionRatio:function(t,e){var n=t.width*t.height,i=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left));return Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*i/n},closestParent:function(t,e,n,i){var o=t.parentNode;if(i=i||p.document,n&&t.matches(e))return t;for(;o&&o!=i.body;){if(o.matches&&o.matches(e))return o;if(!o.parentNode)return null;o=o.parentNode}return null},children:function(t,e,n){var i=[],o="";return n=n||p.doc,t&&(t.id||(o="Temp"+this.randomHexKey(),t.id=o),i=n.querySelectorAll("#"+t.id+" > "+e),o&&t.removeAttribute("id")),i},clean:function(t){for(var e=[],n=-1,n=0;n<t.length;n++)""!==t[n]&&e.push(t[n]);return e},defer:function(t){var e=null,n=null,i=null,n=new this.Deferred;return f.features.has.promises?n.promise=new Promise(function(t,e){n.resolve=t,n.reject=e}):(i=p.jQuery||t.$)&&"function"==typeof i.Deferred?(e=i.Deferred(),n.promise=e.promise(),n.resolve=e.resolve,n.reject=e.reject):p.console&&console.warn(f.messages.warningNoPromiseImplementation()),n},all:function(t,e){var n=null;return f.features.has.promises?Promise.all(t):(n=p.jQuery||e.$)&&"function"==typeof n.when?n.when.apply(n,t).done(function(){return arguments}):(p.console&&console.warn(f.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,n){var i=-1,o="";if(h.dashCase(e)in t.style)return"";for(i=0;o=n[i];i++)if(o+e in t.style)return o.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"==typeof t.body?t:p.document,{scrollTop:p.pageYOffset,scrollLeft:p.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){var e;return!!t.offsetParent||"fixed"===(e=p.getComputedStyle(t)).position&&"hidden"!==e.visibility&&"0"!==e.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){for(var n,i,o=t.split("."),s=e.split("."),r=-1,r=0;r<o.length;r++){if(n=parseInt(o[r].replace(/[^\d.]/g,"")),(i=parseInt(s[r].replace(/[^\d.]/g,"")||0))<n)return!1;if(n<i)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=h.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,n){var i="";return(i+=t.block).length&&(i+=t.delineatorElement),i+=t["element"+this.pascalCase(e)],n?(i.length&&(i+=t.delineatorModifier),i+=n):i},getProperty:function(t,e){var n,i=e.split("."),o="",s=0;if(!e)return t;for(n=function(t){return t?t[o]:null};s<i.length;)o=i[s],t=n(t),s++;return void 0!==t?t:null}},f.h=h,f.Base=function(){},f.Base.prototype={constructor:f.Base,callActions:function(t,e){var n=this.constructor.actions[t],i="";if(n&&!h.isEmptyObject(n))for(i in n)n[i].apply(this,e)},callFilters:function(t,e,n){var i=this.constructor.filters[t],o=e,s="";if(!i||h.isEmptyObject(i))return o;for(s in n=n||[],i)(n=h.arrayFromList(n)).unshift(o),o=i[s].apply(this,n);return o}},f.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){h.extend(this.prototype,t)},this.registerAction=function(t,e,n){(this.actions[t]=this.actions[t]||{})[e]=n},this.registerFilter=function(t,e,n){(this.filters[t]=this.filters[t]||{})[e]=n}},f.Features=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new f.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},f.BaseStatic.call(f.Features),f.Features.prototype=Object.create(f.Base.prototype),h.extend(f.Features.prototype,{constructor:f.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof p.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),h.freeze(t.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=h.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=h.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=h.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+h.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+h.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),f.Has=function(){this.transitions=!1,this.promises=!1,h.seal(this)},f.features=new f.Features,f.features.init(),f.ConfigAnimation=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigAnimation),f.ConfigAnimation.prototype=Object.create(f.Base.prototype),f.ConfigAnimation.prototype.constructor=f.ConfigAnimation,f.ConfigBehavior=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigBehavior),f.ConfigBehavior.prototype=Object.create(f.Base.prototype),f.ConfigBehavior.prototype.constructor=f.ConfigBehavior,f.ConfigCallbacks=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigCallbacks),f.ConfigCallbacks.prototype=Object.create(f.Base.prototype),f.ConfigCallbacks.prototype.constructor=f.ConfigCallbacks,f.ConfigControls=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigControls),f.ConfigControls.prototype=Object.create(f.Base.prototype),f.ConfigControls.prototype.constructor=f.ConfigControls,f.ConfigClassNames=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigClassNames),f.ConfigClassNames.prototype=Object.create(f.Base.prototype),f.ConfigClassNames.prototype.constructor=f.ConfigClassNames,f.ConfigData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigData),f.ConfigData.prototype=Object.create(f.Base.prototype),f.ConfigData.prototype.constructor=f.ConfigData,f.ConfigDebug=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigDebug),f.ConfigDebug.prototype=Object.create(f.Base.prototype),f.ConfigDebug.prototype.constructor=f.ConfigDebug,f.ConfigLayout=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigLayout),f.ConfigLayout.prototype=Object.create(f.Base.prototype),f.ConfigLayout.prototype.constructor=f.ConfigLayout,f.ConfigLoad=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigLoad),f.ConfigLoad.prototype=Object.create(f.Base.prototype),f.ConfigLoad.prototype.constructor=f.ConfigLoad,f.ConfigSelectors=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigSelectors),f.ConfigSelectors.prototype=Object.create(f.Base.prototype),f.ConfigSelectors.prototype.constructor=f.ConfigSelectors,f.ConfigRender=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigRender),f.ConfigRender.prototype=Object.create(f.Base.prototype),f.ConfigRender.prototype.constructor=f.ConfigRender,f.ConfigTemplates=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigTemplates),f.ConfigTemplates.prototype=Object.create(f.Base.prototype),f.ConfigTemplates.prototype.constructor=f.ConfigTemplates,f.Config=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.animation=new f.ConfigAnimation,this.behavior=new f.ConfigBehavior,this.callbacks=new f.ConfigCallbacks,this.controls=new f.ConfigControls,this.classNames=new f.ConfigClassNames,this.data=new f.ConfigData,this.debug=new f.ConfigDebug,this.layout=new f.ConfigLayout,this.load=new f.ConfigLoad,this.selectors=new f.ConfigSelectors,this.render=new f.ConfigRender,this.templates=new f.ConfigTemplates,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Config),f.Config.prototype=Object.create(f.Base.prototype),f.Config.prototype.constructor=f.Config,f.MixerDom=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.MixerDom),f.MixerDom.prototype=Object.create(f.Base.prototype),f.MixerDom.prototype.constructor=f.MixerDom,f.UiClassNames=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.UiClassNames),f.UiClassNames.prototype=Object.create(f.Base.prototype),f.UiClassNames.prototype.constructor=f.UiClassNames,f.CommandDataset=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandDataset),f.CommandDataset.prototype=Object.create(f.Base.prototype),f.CommandDataset.prototype.constructor=f.CommandDataset,f.CommandMultimix=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandMultimix),f.CommandMultimix.prototype=Object.create(f.Base.prototype),f.CommandMultimix.prototype.constructor=f.CommandMultimix,f.CommandFilter=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandFilter),f.CommandFilter.prototype=Object.create(f.Base.prototype),f.CommandFilter.prototype.constructor=f.CommandFilter,f.CommandSort=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandSort),f.CommandSort.prototype=Object.create(f.Base.prototype),f.CommandSort.prototype.constructor=f.CommandSort,f.CommandInsert=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandInsert),f.CommandInsert.prototype=Object.create(f.Base.prototype),f.CommandInsert.prototype.constructor=f.CommandInsert,f.CommandRemove=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandRemove),f.CommandRemove.prototype=Object.create(f.Base.prototype),f.CommandRemove.prototype.constructor=f.CommandRemove,f.CommandChangeLayout=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandChangeLayout),f.CommandChangeLayout.prototype=Object.create(f.Base.prototype),f.CommandChangeLayout.prototype.constructor=f.CommandChangeLayout,f.ControlDefinition=function(t,e,n,i){f.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=n||!1,this.parent=i||"",this.callActions("afterConstruct"),h.freeze(this),h.seal(this)},f.BaseStatic.call(f.ControlDefinition),f.ControlDefinition.prototype=Object.create(f.Base.prototype),f.ControlDefinition.prototype.constructor=f.ControlDefinition,f.controlDefinitions=[],f.controlDefinitions.push(new f.ControlDefinition("multimix","[data-filter][data-sort]")),f.controlDefinitions.push(new f.ControlDefinition("filter","[data-filter]")),f.controlDefinitions.push(new f.ControlDefinition("sort","[data-sort]")),f.controlDefinitions.push(new f.ControlDefinition("toggle","[data-toggle]")),f.Control=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new f.UiClassNames,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Control),f.Control.prototype=Object.create(f.Base.prototype),h.extend(f.Control.prototype,{constructor:f.Control,init:function(t,e,n){var i=this;if(this.callActions("beforeInit",arguments),i.el=t,i.type=e,i.selector=n,i.selector)i.status="live";else switch(i.canDisable="boolean"==typeof i.el.disable,i.type){case"filter":i.filter=i.el.getAttribute("data-filter");break;case"toggle":i.filter=i.el.getAttribute("data-toggle");break;case"sort":i.sort=i.el.getAttribute("data-sort");break;case"multimix":i.filter=i.el.getAttribute("data-filter"),i.sort=i.el.getAttribute("data-sort")}i.bindClick(),f.controls.push(i),this.callActions("afterInit",arguments)},isBound:function(t){var e;return this.callActions("beforeIsBound",arguments),e=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",e,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=this,n=-1;this.callActions("beforeRemoveBinding",arguments),-1<(n=e.bound.indexOf(t))&&e.bound.splice(n,1),e.bound.length<1&&(e.unbindClick(),n=f.controls.indexOf(e),f.controls.splice(n,1),"active"===e.status&&e.renderStatus(e.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},h.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),h.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e,n=this,i=null,o=null,s=!1,r={},a=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,o=n.bound[0],i=n.selector?h.closestParent(t.target,o.config.selectors.control+n.selector,!0,o.dom.document):n.el){switch(n.type){case"filter":r.filter=n.filter||i.getAttribute("data-filter");break;case"sort":r.sort=n.sort||i.getAttribute("data-sort");break;case"multimix":r.filter=n.filter||i.getAttribute("data-filter"),r.sort=n.sort||i.getAttribute("data-sort");break;case"toggle":r.filter=n.filter||i.getAttribute("data-toggle"),s="live"===n.status?h.hasClass(i,n.classNames.active):"active"===n.status}for(l=0;l<n.bound.length;l++)e=new f.CommandMultimix,h.extend(e,r),a.push(e);for(a=n.callFilters("commandsHandleClick",a,arguments),n.pending=n.bound.length,l=0;o=n.bound[l];l++)(r=a[l])&&(o.lastClicked||(o.lastClicked=i),f.events.fire("mixClick",o.dom.container,{state:o.state,instance:o,originalEvent:t,control:o.lastClicked},o.dom.document),"function"==typeof o.config.callbacks.onMixClick&&!1===o.config.callbacks.onMixClick.call(o.lastClicked,o.state,t,o)||("toggle"===n.type?s?o.toggleOff(r.filter):o.toggleOn(r.filter):o.multimix(r)));this.callActions("afterHandleClick",arguments)}else n.callActions("afterHandleClick",arguments)},update:function(t,e){var n=this,i=new f.CommandMultimix;n.callActions("beforeUpdate",arguments),n.pending--,n.pending=Math.max(0,n.pending),0<n.pending||("live"===n.status?n.updateLive(t,e):(i.sort=n.sort,i.filter=n.filter,n.callFilters("actionsUpdate",i,arguments),n.parseStatusChange(n.el,t,i,e)),n.callActions("afterUpdate",arguments))},updateLive:function(t,e){var n,i=this,o=null,s=null,r=-1;if(i.callActions("beforeUpdateLive",arguments),i.el){for(n=i.el.querySelectorAll(i.selector),r=0;s=n[r];r++){switch(o=new f.CommandMultimix,i.type){case"filter":o.filter=s.getAttribute("data-filter");break;case"sort":o.sort=s.getAttribute("data-sort");break;case"multimix":o.filter=s.getAttribute("data-filter"),o.sort=s.getAttribute("data-sort");break;case"toggle":o.filter=s.getAttribute("data-toggle")}o=i.callFilters("actionsUpdateLive",o,arguments),i.parseStatusChange(s,t,o,e)}i.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,n,i){var o=this,s="",r=-1;switch(o.callActions("beforeParseStatusChange",arguments),o.type){case"filter":e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"multimix":e.sort===n.sort&&e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(s=e.sort.replace(/:asc/g,"")),e.sort===n.sort||s===n.sort?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"toggle":for(i.length<1&&o.renderStatus(t,"inactive"),e.filter===n.filter&&o.renderStatus(t,"active"),r=0;r<i.length;r++){if(i[r]===n.filter){o.renderStatus(t,"active");break}o.renderStatus(t,"inactive")}}o.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var n=this;switch(n.callActions("beforeRenderStatus",arguments),e){case"active":h.addClass(t,n.classNames.active),h.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"inactive":h.removeClass(t,n.classNames.active),h.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"disabled":n.canDisable&&(n.el.disabled=!0),h.addClass(t,n.classNames.disabled),h.removeClass(t,n.classNames.active)}"live"!==n.status&&(n.status=e),n.callActions("afterRenderStatus",arguments)}}),f.controls=[],f.StyleData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new f.TransformData,this.translateX=new f.TransformData,this.translateY=new f.TransformData,this.translateZ=new f.TransformData,this.rotateX=new f.TransformData,this.rotateY=new f.TransformData,this.rotateZ=new f.TransformData,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.StyleData),f.StyleData.prototype=Object.create(f.Base.prototype),f.StyleData.prototype.constructor=f.StyleData,f.TransformData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TransformData),f.TransformData.prototype=Object.create(f.Base.prototype),f.TransformData.prototype.constructor=f.TransformData,f.TransformDefaults=function(){f.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TransformDefaults),f.TransformDefaults.prototype=Object.create(f.StyleData.prototype),f.TransformDefaults.prototype.constructor=f.TransformDefaults,f.transformDefaults=new f.TransformDefaults,f.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},f.Events=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Events),f.Events.prototype=Object.create(f.Base.prototype),f.Events.prototype.constructor=f.Events,f.Events.prototype.fire=function(t,e,n,i){var o,s=new f.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');s.state=new f.State,h.extend(s.state,n.state),n.futureState&&(s.futureState=new f.State,h.extend(s.futureState,n.futureState)),s.instance=n.instance,n.originalEvent&&(s.originalEvent=n.originalEvent),o=h.getCustomEvent(t,s,i),this.callFilters("eventFire",o,arguments),e.dispatchEvent(o)},f.events=new f.Events,f.QueueItem=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.QueueItem),f.QueueItem.prototype=Object.create(f.Base.prototype),f.QueueItem.prototype.constructor=f.QueueItem,f.Mixer=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.config=new f.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new f.MixerDom,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Mixer),f.Mixer.prototype=Object.create(f.Base.prototype),h.extend(f.Mixer.prototype,{constructor:f.Mixer,attach:function(t,e,n,i){var o=this,s=null,r=-1;for(o.callActions("beforeAttach",arguments),o.id=n,i&&h.extend(o.config,i,!0,!0),o.sanitizeConfig(),o.cacheDom(t,e),o.config.layout.containerClassName&&h.addClass(o.dom.container,o.config.layout.containerClassName),f.features.has.transitions||(o.config.animation.enable=!1),void 0===p.console&&(o.config.debug.showWarnings=!1),o.config.data.uidKey&&(o.config.controls.enable=!1),o.indexTargets(),o.state=o.getInitialState(),r=0;s=o.lastOperation.toHide[r];r++)s.hide();o.config.controls.enable&&(o.initControls(),o.buildToggleArray(null,o.state),o.updateControls({filter:o.state.activeFilter,sort:o.state.activeSort})),o.parseEffects(),o.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new f.State,n=new f.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(f.messages.errorConfigDataUidKeyNotSet());n.startDataset=n.newDataset=e.activeDataset=t.config.load.dataset.slice(),n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,n.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(n.newSort=e.activeSort,t.sortOperation(n),t.printSort(!1,n),t.targets=n.newOrder):n.startOrder=n.newOrder=t.targets,n.startFilter=n.newFilter=e.activeFilter,n.startSort=n.newSort=e.activeSort,n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,"all"===n.newFilter.selector?n.newFilter.selector=t.config.selectors.target:"none"===n.newFilter.selector&&(n.newFilter.selector="");return n=t.callFilters("operationGetInitialState",n,[e]),(t.lastOperation=n).newFilter&&t.filterOperation(n),e=t.buildState(n)},cacheDom:function(t,e){var n=this;n.callActions("beforeCacheDom",arguments),n.dom.document=e,n.dom.body=n.dom.document.querySelector("body"),n.dom.container=t,n.dom.parent=t,n.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e,n=this,i=null,o=-1;if(n.callActions("beforeIndexTargets",arguments),n.dom.targets=n.config.layout.allowNestedTargets?n.dom.container.querySelectorAll(n.config.selectors.target):h.children(n.dom.container,n.config.selectors.target,n.dom.document),n.dom.targets=h.arrayFromList(n.dom.targets),n.targets=[],(e=n.config.load.dataset)&&e.length!==n.dom.targets.length)throw new Error(f.messages.errorDatasetPrerenderedMismatch());if(n.dom.targets.length){for(o=0;t=n.dom.targets[o];o++)(i=new f.Target).init(t,n,e?e[o]:void 0),i.isInDom=!0,n.targets.push(i);n.dom.parent=n.dom.targets[0].parentElement===n.dom.container?n.dom.container:n.dom.targets[0].parentElement}n.origOrder=n.targets,n.callActions("afterIndexTargets",arguments)},initControls:function(){var t,e,n=this,i=null,o=null,s=null,r=null,a=-1,l=-1;switch(n.callActions("beforeInitControls",arguments),n.config.controls.scope){case"local":o=n.dom.container;break;case"global":o=n.dom.document;break;default:throw new Error(f.messages.errorConfigInvalidControlsScope())}for(a=0;t=f.controlDefinitions[a];a++)if(n.config.controls.live||t.live){if(t.parent){if(!(s=n.dom[t.parent])||s.length<0)continue;"number"!=typeof s.length&&(s=[s])}else s=[o];for(l=0;i=s[l];l++)r=n.getControl(i,t.type,t.selector),n.controls.push(r)}else for(e=o.querySelectorAll(n.config.selectors.control+t.selector),l=0;i=e[l];l++)(r=n.getControl(i,t.type,""))&&n.controls.push(r);n.callActions("afterInitControls",arguments)},getControl:function(t,e,n){var i=this,o=null,s=-1;if(i.callActions("beforeGetControl",arguments),!n)for(s=0;o=f.controls[s];s++){if(o.el===t&&o.isBound(i))return i.callFilters("controlGetControl",null,arguments);if(o.el===t&&o.type===e&&o.selector===n)return o.addBinding(i),i.callFilters("controlGetControl",o,arguments)}return(o=new f.Control).init(t,e,n),o.classNames.base=h.getClassname(i.config.classNames,e),o.classNames.active=h.getClassname(i.config.classNames,e,i.config.classNames.modifierActive),o.classNames.disabled=h.getClassname(i.config.classNames,e,i.config.classNames.modifierDisabled),o.addBinding(i),i.callFilters("controlGetControl",o,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",n="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=h.clean(t.toggleArray),""===(n=t.toggleArray.join(e))&&(n=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",n,arguments)},buildToggleArray:function(t,e){var n=this,i="";if(n.callActions("beforeBuildToggleArray",arguments),t&&t.filter)i=t.filter.selector.replace(/\s/g,"");else{if(!e)return;i=e.activeFilter.selector.replace(/\s/g,"")}i!==n.config.selectors.target&&"all"!==i||(i=""),"or"===n.config.controls.toggleLogic?n.toggleArray=i.split(","):n.toggleArray=n.splitCompoundSelector(i),n.toggleArray=h.clean(n.toggleArray),n.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),n=[],i="",o=-1;for(""===e[0]&&e.shift(),o=0;o<e.length;o++)o%2==0&&(i=""),i+=e[o],o%2!=0&&n.push(i);return n},updateControls:function(t){var e=this,n=null,i=new f.CommandMultimix,o=-1;for(e.callActions("beforeUpdateControls",arguments),t.filter?i.filter=t.filter.selector:i.filter=e.state.activeFilter.selector,t.sort?i.sort=e.buildSortString(t.sort):i.sort=e.buildSortString(e.state.activeSort),i.filter===e.config.selectors.target&&(i.filter="all"),""===i.filter&&(i.filter="none"),h.freeze(i),o=0;n=e.controls[o];o++)n.update(i,e.toggleArray);e.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var n,i=this,o=-1,s=null,r=null,a=null,l=-1;if(i.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),n=i.getNextSibling(t.index,t.sibling,t.position),s=i.dom.document.createDocumentFragment(),o=n?h.index(n,i.config.selectors.target):i.targets.length,t.collection){for(l=0;a=t.collection[l];l++){if(-1<i.dom.targets.indexOf(a))throw new Error(f.messages.errorInsertPreexistingElement());a.style.display="none",s.appendChild(a),s.appendChild(i.dom.document.createTextNode(" ")),h.isElement(a,i.dom.document)&&a.matches(i.config.selectors.target)&&((r=new f.Target).init(a,i),r.isInDom=!0,i.targets.splice(o,0,r),o++)}i.dom.parent.insertBefore(s,n)}e.startOrder=i.origOrder=i.targets,i.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,n){var i=this,o=null;return t=Math.max(t,0),e&&"before"===n?o=e:e&&"after"===n?o=e.nextElementSibling||null:0<i.targets.length&&void 0!==t?o=t<i.targets.length||!i.targets.length?i.targets[t].dom.el:i.targets[i.targets.length-1].dom.el.nextElementSibling:0===i.targets.length&&0<i.dom.parent.children.length&&(i.config.layout.siblingAfter?o=i.config.layout.siblingAfter:i.config.layout.siblingBefore?o=i.config.layout.siblingBefore.nextElementSibling:i.dom.parent.children[0]),i.callFilters("elementGetNextSibling",o,arguments)},filterOperation:function(t){var e,n,i=!1,o=null,s=-1;for(this.callActions("beforeFilterOperation",arguments),n=t.newFilter.action,s=0;o=t.newOrder[s];s++)i=t.newFilter.collection?-1<t.newFilter.collection.indexOf(o.dom.el):""!==t.newFilter.selector&&o.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(i,o,n,t);if(t.toRemove.length)for(s=0;o=t.show[s];s++)-1<t.toRemove.indexOf(o)&&(t.show.splice(s,1),-1<(e=t.toShow.indexOf(o))&&t.toShow.splice(e,1),t.toHide.push(o),t.hide.push(o),s--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,n,i){var o=Array.prototype.slice.call(arguments,1),s=this.callFilters("testResultEvaluateHideShow",t,o);this.callActions("beforeEvaluateHideShow",arguments),!0===s&&"show"===n||!1===s&&"hide"===n?(i.show.push(e),e.isShown||i.toShow.push(e)):(i.hide.push(e),e.isShown&&i.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(n){var t,i=this,e=[],o=null,s=-1;if(i.callActions("beforeSortOperation",arguments),n.startOrder=i.targets,n.newSort.collection){for(e=[],s=0;t=n.newSort.collection[s];s++){if(i.dom.targets.indexOf(t)<0)throw new Error(f.messages.errorSortNonExistentElement());(o=new f.Target).init(t,i),o.isInDom=!0,e.push(o)}n.newOrder=e}else"random"===n.newSort.order?n.newOrder=h.arrayShuffle(n.startOrder):""===n.newSort.attribute?(n.newOrder=i.origOrder.slice(),"desc"===n.newSort.order&&n.newOrder.reverse()):(n.newOrder=n.startOrder.slice(),n.newOrder.sort(function(t,e){return i.compare(t,e,n.newSort)}));h.isEqualArray(n.newOrder,n.startOrder)&&(n.willSort=!1),i.callActions("afterSortOperation",arguments)},compare:function(t,e,n){var i=n.order,o=this.getAttributeValue(t,n.attribute),s=this.getAttributeValue(e,n.attribute),s=isNaN(+o)||isNaN(+s)?(o=o.toLowerCase(),s.toLowerCase()):(o=+o,+s);return o<s?"asc"===i?-1:1:s<o?"asc"===i?1:-1:o===s&&n.next?this.compare(t,e,n.next):0},getAttributeValue:function(t,e){var n="";return null===(n=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(f.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",n||0,arguments)},printSort:function(t,e){var n=this,i=t?e.newOrder:e.startOrder,o=t?e.startOrder:e.newOrder,t=i.length?i[i.length-1].dom.el.nextElementSibling:null,s=p.document.createDocumentFragment(),e=null,r=null,a=null,l=-1;for(n.callActions("beforePrintSort",arguments),l=0;r=i[l];l++)"absolute"!==(a=r.dom.el).style.position&&(h.removeWhitespace(a.previousSibling),a.parentElement.removeChild(a));for((e=t?t.previousSibling:n.dom.parent.lastChild)&&"#text"===e.nodeName&&h.removeWhitespace(e),l=0;r=o[l];l++)a=r.dom.el,h.isElement(s.lastChild)&&s.appendChild(p.document.createTextNode(" ")),s.appendChild(a);n.dom.parent.firstChild&&n.dom.parent.firstChild!==t&&s.insertBefore(p.document.createTextNode(" "),s.childNodes[0]),t?(s.appendChild(p.document.createTextNode(" ")),n.dom.parent.insertBefore(s,t)):n.dom.parent.appendChild(s),n.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){for(var n,i=t.split(" "),o=e,s=-1,s=0;s<i.length;s++){switch(n=i[s].split(":"),o.sortString=i[s],o.attribute=h.dashCase(n[0]),o.order=n[1]||"asc",o.attribute){case"default":o.attribute="";break;case"random":o.attribute="",o.order="random"}if(!o.attribute||"random"===o.order)break;s<i.length-1&&(o.next=new f.CommandSort,h.freeze(o),o=o.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",n=t.config.animation.effectsIn||t.config.animation.effects,i=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new f.StyleData,t.effectsOut=new f.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",n,t.effectsIn,t.transformIn),t.parseEffect("fade",i,t.effectsOut,t.transformOut,!0),f.transformDefaults)f.transformDefaults[e]instanceof f.TransformData&&(t.parseEffect(e,n,t.effectsIn,t.transformIn),t.parseEffect(e,i,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",n,t.effectsIn,t.transformIn),t.parseEffect("stagger",i,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,n,i,o){var s,r,a,l=this,c="",d=["%","px","em","rem","vh","vw","deg"],u=-1;if(l.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(f.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(l.staggerDuration=0);else{switch(-1<(s=e.indexOf(t+"("))&&(r=e.substring(s),c=/\(([^)]+)\)/.exec(r)[1]),t){case"fade":n.opacity=c?parseFloat(c):0;break;case"stagger":l.staggerDuration=c?parseFloat(c):100;break;default:if(o&&l.config.animation.reverseOut&&"scale"!==t?n[t].value=-1*(c?parseFloat(c):f.transformDefaults[t].value):n[t].value=c?parseFloat(c):f.transformDefaults[t].value,c){for(u=0;a=d[u];u++)if(-1<c.indexOf(a)){n[t].unit=a;break}}else n[t].unit=f.transformDefaults[t].unit;i.push(t+"("+n[t].value+n[t].unit+")")}l.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=this,n=new f.State,i=null,o=-1;for(e.callActions("beforeBuildState",arguments),o=0;i=e.targets[o];o++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&n.targets.push(i.dom.el);for(o=0;i=t.matching[o];o++)n.matching.push(i.dom.el);for(o=0;i=t.show[o];o++)n.show.push(i.dom.el);for(o=0;i=t.hide[o];o++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&n.hide.push(i.dom.el);return n.id=e.id,n.container=e.dom.container,n.activeFilter=t.newFilter,n.activeSort=t.newSort,n.activeDataset=t.newDataset,n.activeContainerClassName=t.newContainerClassName,n.hasFailed=t.hasFailed,n.totalTargets=e.targets.length,n.totalShow=t.show.length,n.totalHide=t.hide.length,n.totalMatching=t.matching.length,n.triggerElement=t.triggerElement,e.callFilters("stateBuildState",n,arguments)},goMix:function(t,e){var n=this,i=null;return n.callActions("beforeGoMix",arguments),n.config.animation.duration&&n.config.animation.effects&&h.isVisible(n.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),f.events.fire("mixStart",n.dom.container,{state:e.startState,futureState:e.newState,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixStart&&n.config.callbacks.onMixStart.call(n.dom.container,e.startState,e.newState,n),h.removeClass(n.dom.container,h.getClassname(n.config.classNames,"container",n.config.classNames.modifierFailed)),i=n.userDeferred||(n.userDeferred=h.defer(f.libraries)),n.isBusy=!0,t&&f.features.has.transitions?(p.pageYOffset!==e.docState.scrollTop&&p.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),n.config.animation.applyPerspective&&(n.dom.parent.style[f.features.perspectiveProp]=n.config.animation.perspectiveDistance,n.dom.parent.style[f.features.perspectiveOriginProp]=n.config.animation.perspectiveOrigin),n.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),n.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(n.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){n.moveTargets(e)})):n.config.debug.fauxAsync?setTimeout(function(){n.cleanUp(e)},n.config.animation.duration):n.cleanUp(e),n.callFilters("promiseGoMix",i.promise,arguments)},getStartMixData:function(t){var e=this,n=p.getComputedStyle(e.dom.parent),i=e.dom.parent.getBoundingClientRect(),o=null,s={},r=-1,a=n[f.features.boxSizingProp];for(e.incPadding="border-box"===a,e.callActions("beforeGetStartMixData",arguments),r=0;o=t.show[r];r++)s=o.getPosData(),t.showPosData[r]={startPosData:s};for(r=0;o=t.toHide[r];r++)s=o.getPosData(),t.toHidePosData[r]={startPosData:s};t.startX=i.left,t.startY=i.top,t.startHeight=e.incPadding?i.height:i.height-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderTop)-parseFloat(n.borderBottom),t.startWidth=e.incPadding?i.width:i.width-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderLeft)-parseFloat(n.borderRight),e.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,n=null,i=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),i=0;n=t.toShow[i];i++)n.show();t.willChangeLayout&&(h.removeClass(e.dom.container,t.startContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,n=-1;for(this.callActions("beforeGetInterMixData",arguments),n=0;e=t.show[n];n++)t.showPosData[n].interPosData=e.getPosData();for(n=0;e=t.toHide[n];n++)t.toHidePosData[n].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,n=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),n=0;e=t.toHide[n];n++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,n=this,i=null,o=null,s=-1;for(n.callActions("beforeGetFinalMixData",arguments),s=0;o=t.show[s];s++)t.showPosData[s].finalPosData=o.getPosData();for(s=0;o=t.toHide[s];s++)t.toHidePosData[s].finalPosData=o.getPosData();for((n.config.animation.clampHeight||n.config.animation.clampWidth)&&(n.dom.parent.style.height=n.dom.parent.style.width=n.dom.parent.style.overflow=""),n.incPadding||(i=p.getComputedStyle(n.dom.parent)),e=n.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=n.incPadding?e.height:e.height-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderTop)-parseFloat(i.borderBottom),t.newWidth=n.incPadding?e.width:e.width-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderLeft)-parseFloat(i.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&n.printSort(!0,t),s=0;o=t.toShow[s];s++)o.hide();for(s=0;o=t.toHide[s];s++)o.show();t.willChangeLayout&&(h.removeClass(n.dom.container,t.newContainerClassName),h.addClass(n.dom.container,n.config.layout.containerClassName)),n.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,n=null,i=null,o=Object.getOwnPropertyNames(e.effectsIn),s="",r=null,a=-1,l=-1,c=-1,d=-1;for(e.callActions("beforeGetTweenData",arguments),c=0;n=t.show[c];c++)for((i=t.showPosData[c]).posIn=new f.StyleData,i.posOut=new f.StyleData,i.tweenData=new f.StyleData,n.isShown?(i.posIn.x=i.startPosData.x-i.interPosData.x,i.posIn.y=i.startPosData.y-i.interPosData.y):i.posIn.x=i.posIn.y=0,i.posOut.x=i.finalPosData.x-i.interPosData.x,i.posOut.y=i.finalPosData.y-i.interPosData.y,i.posIn.opacity=n.isShown?1:e.effectsIn.opacity,i.posOut.opacity=1,i.tweenData.opacity=i.posOut.opacity-i.posIn.opacity,n.isShown||e.config.animation.nudge||(i.posIn.x=i.posOut.x,i.posIn.y=i.posOut.y),i.tweenData.x=i.posOut.x-i.posIn.x,i.tweenData.y=i.posOut.y-i.posIn.y,e.config.animation.animateResizeTargets&&(i.posIn.width=i.startPosData.width,i.posIn.height=i.startPosData.height,a=(i.startPosData.width||i.finalPosData.width)-i.interPosData.width,i.posIn.marginRight=i.startPosData.marginRight-a,l=(i.startPosData.height||i.finalPosData.height)-i.interPosData.height,i.posIn.marginBottom=i.startPosData.marginBottom-l,i.posOut.width=i.finalPosData.width,i.posOut.height=i.finalPosData.height,a=(i.finalPosData.width||i.startPosData.width)-i.interPosData.width,i.posOut.marginRight=i.finalPosData.marginRight-a,l=(i.finalPosData.height||i.startPosData.height)-i.interPosData.height,i.posOut.marginBottom=i.finalPosData.marginBottom-l,i.tweenData.width=i.posOut.width-i.posIn.width,i.tweenData.height=i.posOut.height-i.posIn.height,i.tweenData.marginRight=i.posOut.marginRight-i.posIn.marginRight,i.tweenData.marginBottom=i.posOut.marginBottom-i.posIn.marginBottom),d=0;s=o[d];d++)(r=e.effectsIn[s])instanceof f.TransformData&&r.value&&(i.posIn[s].value=r.value,i.posOut[s].value=0,i.tweenData[s].value=i.posOut[s].value-i.posIn[s].value,i.posIn[s].unit=i.posOut[s].unit=i.tweenData[s].unit=r.unit);for(c=0;n=t.toHide[c];c++)for((i=t.toHidePosData[c]).posIn=new f.StyleData,i.posOut=new f.StyleData,i.tweenData=new f.StyleData,i.posIn.x=n.isShown?i.startPosData.x-i.interPosData.x:0,i.posIn.y=n.isShown?i.startPosData.y-i.interPosData.y:0,i.posOut.x=e.config.animation.nudge?0:i.posIn.x,i.posOut.y=e.config.animation.nudge?0:i.posIn.y,i.tweenData.x=i.posOut.x-i.posIn.x,i.tweenData.y=i.posOut.y-i.posIn.y,e.config.animation.animateResizeTargets&&(i.posIn.width=i.startPosData.width,i.posIn.height=i.startPosData.height,a=i.startPosData.width-i.interPosData.width,i.posIn.marginRight=i.startPosData.marginRight-a,l=i.startPosData.height-i.interPosData.height,i.posIn.marginBottom=i.startPosData.marginBottom-l),i.posIn.opacity=1,i.posOut.opacity=e.effectsOut.opacity,i.tweenData.opacity=i.posOut.opacity-i.posIn.opacity,d=0;s=o[d];d++)(r=e.effectsOut[s])instanceof f.TransformData&&r.value&&(i.posIn[s].value=0,i.posOut[s].value=r.value,i.tweenData[s].value=i.posOut[s].value-i.posIn[s].value,i.posIn[s].unit=i.posOut[s].unit=i.tweenData[s].unit=r.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,n=null,i=null,o=null,s="",r=!1,a=-1,l=-1,c=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;n=t.show[l];l++)i=new f.IMoveData,o=t.showPosData[l],s=n.isShown?"none":"show",(r=e.willTransition(s,t.hasEffect,o.posIn,o.posOut))&&a++,n.show(),i.posIn=o.posIn,i.posOut=o.posOut,i.statusChange=s,i.staggerIndex=a,i.operation=t,i.callback=r?c:null,n.move(i);for(l=0;n=t.toHide[l];l++)o=t.toHidePosData[l],i=new f.IMoveData,s="hide",r=e.willTransition(s,o.posIn,o.posOut),i.posIn=o.posIn,i.posOut=o.posOut,i.statusChange=s,i.staggerIndex=l,i.operation=t,i.callback=r?c:null,n.move(i);e.config.animation.animateResizeContainer&&(e.dom.parent.style[f.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(h.removeClass(e.dom.container,e.config.layout.ContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t,e,n=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],i=!1,o=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(o=0;t=n[o];o++)if(0!==("undefined"!==(e=this.effectsIn[t]).value?e.value:e)){i=!0;break}return this.callFilters("resultHasEffect",i,arguments)},willTransition:function(t,e,n,i){var o=!1,o=!!h.isVisible(this.dom.container)&&(!!("none"!==t&&e||n.x!==i.x||n.y!==i.y)||!!this.config.animation.animateResizeTargets&&(n.width!==i.width||n.height!==i.height||n.marginRight!==i.marginRight||n.marginTop!==i.marginTop));return this.callFilters("resultWillTransition",o,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e,n,i=this,o=null,s=null,r=-1;for(i.callActions("beforeCleanUp",arguments),r=i.targetsMoved=i.targetsImmovable=i.targetsBound=i.targetsDone=0;o=t.show[r];r++)o.cleanUp(),o.show();for(r=0;o=t.toHide[r];r++)o.cleanUp(),o.hide();if(t.willSort&&i.printSort(!1,t),i.dom.parent.style[f.features.transitionProp]=i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=i.dom.parent.style[f.features.perspectiveProp]=i.dom.parent.style[f.features.perspectiveOriginProp]="",t.willChangeLayout&&(h.removeClass(i.dom.container,t.startContainerClassName),h.addClass(i.dom.container,t.newContainerClassName)),t.toRemove.length){for(r=0;o=i.targets[r];r++)-1<t.toRemove.indexOf(o)&&((e=o.dom.el.previousSibling)&&"#text"===e.nodeName&&(s=o.dom.el.nextSibling)&&"#text"===s.nodeName&&h.removeWhitespace(e),t.willSort||i.dom.parent.removeChild(o.dom.el),i.targets.splice(r,1),o.isInDom=!1,r--);i.origOrder=i.targets}t.willSort&&(i.targets=t.newOrder),i.state=t.newState,i.lastOperation=t,i.dom.targets=i.state.targets,f.events.fire("mixEnd",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixEnd&&i.config.callbacks.onMixEnd.call(i.dom.container,i.state,i),t.hasFailed&&(f.events.fire("mixFail",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixFail&&i.config.callbacks.onMixFail.call(i.dom.container,i.state,i),h.addClass(i.dom.container,h.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed))),"function"==typeof i.userCallback&&i.userCallback.call(i.dom.container,i.state,i),"function"==typeof i.userDeferred.resolve&&i.userDeferred.resolve(i.state),i.userCallback=null,i.userDeferred=null,i.lastClicked=null,i.isToggling=!1,i.isBusy=!1,i.queue.length&&(i.callActions("beforeReadQueueCleanUp",arguments),n=i.queue.shift(),i.userDeferred=n.deferred,i.isToggling=n.isToggling,i.lastClicked=n.triggerElement,(n.instruction.command instanceof f.CommandMultimix?i.multimix:i.dataset).apply(i,n.args)),i.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e,n=this,i=new f.UserInstruction,o=-1;for(i.animate=n.config.animation.enable,i.command=new f.CommandMultimix,o=0;o<t.length;o++)null!==(e=t[o])&&("object"==typeof e?h.extend(i.command,e):"boolean"==typeof e?i.animate=e:"function"==typeof e&&(i.callback=e));return!i.command.insert||i.command.insert instanceof f.CommandInsert||(i.command.insert=n.parseInsertArgs([i.command.insert]).command),!i.command.remove||i.command.remove instanceof f.CommandRemove||(i.command.remove=n.parseRemoveArgs([i.command.remove]).command),!i.command.filter||i.command.filter instanceof f.CommandFilter||(i.command.filter=n.parseFilterArgs([i.command.filter]).command),!i.command.sort||i.command.sort instanceof f.CommandSort||(i.command.sort=n.parseSortArgs([i.command.sort]).command),!i.command.changeLayout||i.command.changeLayout instanceof f.CommandChangeLayout||(i.command.changeLayout=n.parseChangeLayoutArgs([i.command.changeLayout]).command),i=n.callFilters("instructionParseMultimixArgs",i,arguments),h.freeze(i),i},parseFilterArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandFilter,i=0;i<t.length;i++)"string"==typeof(e=t[i])?n.command.selector=e:null===e?n.command.collection=[]:"object"==typeof e&&h.isElement(e,this.dom.document)?n.command.collection=[e]:"object"==typeof e&&void 0!==e.length?n.command.collection=h.arrayFromList(e):"object"==typeof e?h.extend(n.command,e):"boolean"==typeof e?n.animate=e:"function"==typeof e&&(n.callback=e);if(n.command.selector&&n.command.collection)throw new Error(f.messages.errorFilterInvalidArguments());return n=this.callFilters("instructionParseFilterArgs",n,arguments),h.freeze(n),n},parseSortArgs:function(t){var e,n=new f.UserInstruction,i="",o=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandSort,o=0;o<t.length;o++)if(null!==(e=t[o]))switch(typeof e){case"string":i=e;break;case"object":e.length&&(n.command.collection=h.arrayFromList(e));break;case"boolean":n.animate=e;break;case"function":n.callback=e}return i&&(n.command=this.parseSortString(i,n.command)),n=this.callFilters("instructionParseSortArgs",n,arguments),h.freeze(n),n},parseInsertArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandInsert,i=0;i<t.length;i++)null!==(e=t[i])&&("number"==typeof e?n.command.index=e:"string"==typeof e&&-1<["before","after"].indexOf(e)?n.command.position=e:"string"==typeof e?n.command.collection=h.arrayFromList(h.createElement(e).childNodes):"object"==typeof e&&h.isElement(e,this.dom.document)?n.command.collection.length?n.command.sibling=e:n.command.collection=[e]:"object"==typeof e&&e.length?n.command.collection.length?n.command.sibling=e[0]:n.command.collection=e:"object"==typeof e&&e.childNodes&&e.childNodes.length?n.command.collection.length?n.command.sibling=e.childNodes[0]:n.command.collection=h.arrayFromList(e.childNodes):"object"==typeof e?h.extend(n.command,e):"boolean"==typeof e?n.animate=e:"function"==typeof e&&(n.callback=e));if(n.command.index&&n.command.sibling)throw new Error(f.messages.errorInsertInvalidArguments());return!n.command.collection.length&&this.config.debug.showWarnings&&console.warn(f.messages.warningInsertNoElements()),n=this.callFilters("instructionParseInsertArgs",n,arguments),h.freeze(n),n},parseRemoveArgs:function(t){var e,n,i=this,o=new f.UserInstruction,s=-1;for(o.animate=i.config.animation.enable,o.command=new f.CommandRemove,s=0;s<t.length;s++)if(null!==(n=t[s]))switch(typeof n){case"number":i.targets[n]&&(o.command.targets[0]=i.targets[n]);break;case"string":o.command.collection=h.arrayFromList(i.dom.parent.querySelectorAll(n));break;case"object":n&&n.length?o.command.collection=n:h.isElement(n,i.dom.document)?o.command.collection=[n]:h.extend(o.command,n);break;case"boolean":o.animate=n;break;case"function":o.callback=n}if(o.command.collection.length)for(s=0;e=i.targets[s];s++)-1<o.command.collection.indexOf(e.dom.el)&&o.command.targets.push(e);return!o.command.targets.length&&i.config.debug.showWarnings&&console.warn(f.messages.warningRemoveNoElements()),h.freeze(o),o},parseDatasetArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandDataset,i=0;i<t.length;i++)if(null!==(e=t[i]))switch(typeof e){case"object":Array.isArray(e)||"number"==typeof e.length?n.command.dataset=e:h.extend(n.command,e);break;case"boolean":n.animate=e;break;case"function":n.callback=e}return h.freeze(n),n},parseChangeLayoutArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandChangeLayout,i=0;i<t.length;i++)if(null!==(e=t[i]))switch(typeof e){case"string":n.command.containerClassName=e;break;case"object":h.extend(n.command,e);break;case"boolean":n.animate=e;break;case"function":n.callback=e}return h.freeze(n),n},queueMix:function(t){var e,n=this,i=null;return n.callActions("beforeQueueMix",arguments),i=h.defer(f.libraries),n.config.animation.queue&&n.queue.length<n.config.animation.queueLimit?(t.deferred=i,n.queue.push(t),n.config.controls.enable&&(n.isToggling?(n.buildToggleArray(t.instruction.command),e=n.getToggleSelector(),n.updateControls({filter:{selector:e}})):n.updateControls(t.instruction.command))):(n.config.debug.showWarnings&&console.warn(f.messages.warningMultimixInstanceQueueFull()),i.resolve(n.state),f.events.fire("mixBusy",n.dom.container,{state:n.state,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixBusy&&n.config.callbacks.onMixBusy.call(n.dom.container,n.state,n)),n.callFilters("promiseQueueMix",i.promise,arguments)},getDataOperation:function(t){var e=this,n=new f.Operation,i=[],n=e.callFilters("operationUnmappedGetDataOperation",n,arguments);if(e.dom.targets.length&&!(i=e.state.activeDataset||[]).length)throw new Error(f.messages.errorDatasetNotSet());return n.id=h.randomHex(),n.startState=e.state,n.startDataset=i,n.newDataset=t.slice(),e.diffDatasets(n),n.startOrder=e.targets,n.newOrder=n.show,e.config.animation.enable&&(e.getStartMixData(n),e.setInter(n),n.docState=h.getDocumentState(e.dom.document),e.getInterMixData(n),e.setFinal(n),e.getFinalMixData(n),e.parseEffects(),n.hasEffect=e.hasEffect(),e.getTweenData(n)),e.targets=n.show.slice(),n.newState=e.buildState(n),Array.prototype.push.apply(e.targets,n.toRemove),n=e.callFilters("operationMappedGetDataOperation",n,arguments)},diffDatasets:function(t){var e=this,n=[],i=[],o=[],s=null,r=null,a=null,l=null,c=null,d={},u="",p=-1;for(e.callActions("beforeDiffDatasets",arguments),p=0;s=t.newDataset[p];p++){if(void 0===(u=s[e.config.data.uidKey])||u.toString().length<1)throw new TypeError(f.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(d[u])throw new Error(f.messages.errorDatasetDuplicateUid({uid:u}));d[u]=!0,(r=e.cache[u])instanceof f.Target?(e.config.data.dirtyCheck&&!h.deepEquals(s,r.data)&&(a=r.render(s),r.data=s,a!==r.dom.el&&(r.isInDom&&(r.unbindEvents(),e.dom.parent.replaceChild(a,r.dom.el)),r.isShown||(a.style.display="none"),r.dom.el=a,r.isInDom&&r.bindEvents())),a=r.dom.el):((r=new f.Target).init(null,e,s),r.hide()),r.isInDom?(c=r.dom.el.nextElementSibling,i.push(u),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,r.dom.el,o),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(r.dom.el),r.isInDom=!0,r.unbindEvents(),r.bindEvents(),r.hide(),t.toShow.push(r),o.push(r)),t.show.push(r)}for(l&&((c=c||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,c,o)),p=0;s=t.startDataset[p];p++)u=s[e.config.data.uidKey],r=e.cache[u],t.show.indexOf(r)<0?(t.hide.push(r),t.toHide.push(r),t.toRemove.push(r)):n.push(u);h.isEqualArray(n,i)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,n){var i=e?h.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);n.length;)this.targets.splice(i,0,n.shift()),i++},willSort:function(t,e){var n=!1,n=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next);return this.callFilters("resultWillSort",n,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t,e=this,n=e.parseFilterArgs(arguments),i=n.command.selector;return e.isToggling=!0,e.toggleArray.indexOf(i)<0&&e.toggleArray.push(i),t=e.getToggleSelector(),e.multimix({filter:t},n.animate,n.callback)},toggleOff:function(){var t=this,e=t.parseFilterArgs(arguments),n=e.command.selector,i=t.toggleArray.indexOf(n);return t.isToggling=!0,-1<i&&t.toggleArray.splice(i,1),n=t.getToggleSelector(),t.multimix({filter:n},e.animate,e.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t,e,n=this,i=n.parseDatasetArgs(arguments),o=null;return n.callActions("beforeDataset",arguments),n.isBusy?((o=new f.QueueItem).args=arguments,o.instruction=i,n.queueMix(o)):(i.callback&&(n.userCallback=i.callback),e=i.animate^n.config.animation.enable?i.animate:n.config.animation.enable,t=n.getDataOperation(i.command.dataset),n.goMix(e,t))},multimix:function(){var t,e,n=this,i=null,o=n.parseMultimixArgs(arguments);return n.callActions("beforeMultimix",arguments),n.isBusy?((i=new f.QueueItem).args=arguments,i.instruction=o,i.triggerElement=n.lastClicked,i.isToggling=n.isToggling,n.queueMix(i)):(t=n.getOperation(o.command),n.config.controls.enable&&(o.command.filter&&!n.isToggling&&(n.toggleArray.length=0,n.buildToggleArray(t.command)),n.queue.length<1&&n.updateControls(t.command)),o.callback&&(n.userCallback=o.callback),e=o.animate^n.config.animation.enable?o.animate:n.config.animation.enable,n.callFilters("operationMultimix",t,arguments),n.goMix(e,t))},getOperation:function(t){var e=this,n=t.sort,i=t.filter,o=t.changeLayout,s=t.remove,r=t.insert,a=new f.Operation;return(a=e.callFilters("operationUnmappedGetOperation",a,arguments)).id=h.randomHex(),a.command=t,a.startState=e.state,a.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(f.messages.warningGetOperationInstanceBusy()),null):(r&&e.insertTargets(r,a),s&&(a.toRemove=s.targets),a.startSort=a.newSort=a.startState.activeSort,a.startOrder=a.newOrder=e.targets,n&&(a.startSort=a.startState.activeSort,a.newSort=n,a.willSort=e.willSort(n,a.startState.activeSort),a.willSort&&e.sortOperation(a)),a.startFilter=a.startState.activeFilter,a.newFilter=i||h.extend(new f.CommandFilter,a.startFilter),"all"===a.newFilter.selector?a.newFilter.selector=e.config.selectors.target:"none"===a.newFilter.selector&&(a.newFilter.selector=""),e.filterOperation(a),a.startContainerClassName=a.startState.activeContainerClassName,o?(a.newContainerClassName=o.containerClassName,a.newContainerClassName!==a.startContainerClassName&&(a.willChangeLayout=!0)):a.newContainerClassName=a.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(a),e.setInter(a),a.docState=h.getDocumentState(e.dom.document),e.getInterMixData(a),e.setFinal(a),e.getFinalMixData(a),e.parseEffects(),a.hasEffect=e.hasEffect(),e.getTweenData(a)),a.willSort&&(e.targets=a.newOrder),a.newState=e.buildState(a),e.callFilters("operationMappedGetOperation",a,arguments))},tween:function(t,e){var n,i=null,o=null,s=-1;for(e=Math.min(e,1),e=Math.max(e,0),s=0;i=t.show[s];s++)o=t.showPosData[s],i.applyTween(o,e);for(s=0;i=t.hide[s];s++)i.isShown&&i.hide(),-1<(n=t.toHide.indexOf(i))&&(o=t.toHidePosData[n],i.isShown||i.show(),i.applyTween(o,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e=null,e=t?h.getProperty(this.config,t):this.config;return this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),h.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t=new f.State;return h.extend(t,this.state),h.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,n=null,i="";for(i in t.cache)(n=(e=t.cache[i]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(n,e.dom.el)),e.isShown||(n.style.display="none"),e.dom.el=n,e.isInDom&&e.bindEvents());t.state=t.buildState(t.lastOperation)},destroy:function(t){var e=this,n=null,i=null,o=0;for(e.callActions("beforeDestroy",arguments),o=0;n=e.controls[o];o++)n.removeBinding(e);for(o=0;i=e.targets[o];o++)t&&i.show(),i.unbindEvents();e.dom.container.id.match(/^MixItUp/)&&e.dom.container.removeAttribute("id"),delete f.instances[e.id],e.callActions("afterDestroy",arguments)}}),f.IMoveData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.IMoveData),f.IMoveData.prototype=Object.create(f.Base.prototype),f.IMoveData.prototype.constructor=f.IMoveData,f.TargetDom=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TargetDom),f.TargetDom.prototype=Object.create(f.Base.prototype),f.TargetDom.prototype.constructor=f.TargetDom,f.Target=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new f.TargetDom,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Target),f.Target.prototype=Object.create(f.Base.prototype),h.extend(f.Target.prototype,{constructor:f.Target,init:function(t,e,n){var i=this,o="";if(i.callActions("beforeInit",arguments),i.mixer=e,t=t||i.render(n),i.cacheDom(t),i.bindEvents(),"none"!==i.dom.el.style.display&&(i.isShown=!0),n&&e.config.data.uidKey){if(void 0===(o=n[e.config.data.uidKey])||o.toString().length<1)throw new TypeError(f.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));i.id=o,i.data=n,e.cache[o]=i}i.callActions("afterInit",arguments)},render:function(t){var e,n=null,i=null,o=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(n=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(f.messages.errorDatasetRendererNotSet());return(e=n(t))&&"object"==typeof e&&h.isElement(e)?i=e:"string"==typeof e&&((o=document.createElement("div")).innerHTML=e,i=o.firstElementChild),this.callFilters("elRender",i,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){t=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),t=isNaN(+t)?t.toLowerCase():+t,this.sortString=t,this.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var n,i,o=this,s=t.posIn,r=[],a=new f.StyleData,l=-1;for(o.callActions("beforeApplyTween",arguments),a.x=s.x,a.y=s.y,0===e?o.hide():o.isShown||o.show(),l=0;n=f.features.TWEENABLE[l];l++)i=t.tweenData[n],"x"===n?i&&(a.x=s.x+i*e):"y"===n?i&&(a.y=s.y+i*e):i instanceof f.TransformData?i.value&&(a[n].value=s[n].value+i.value*e,a[n].unit=i.unit,r.push(n+"("+a[n].value+i.unit+")")):i&&(a[n]=s[n]+i*e,o.dom.el.style[n]=a[n]);(a.x||a.y)&&r.unshift("translate("+a.x+"px, "+a.y+"px)"),r.length&&(o.dom.el.style[f.features.transformProp]=r.join(" ")),o.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,n=t.posIn,i=1!==e.mixer.effectsIn.opacity,o=[];e.callActions("beforeApplyStylesIn",arguments),o.push("translate("+n.x+"px, "+n.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=n.width+"px",e.dom.el.style.height=n.height+"px"),e.dom.el.style.marginRight=n.marginRight+"px",e.dom.el.style.marginBottom=n.marginBottom+"px"),i&&(e.dom.el.style.opacity=n.opacity),"show"===t.statusChange&&(o=o.concat(e.mixer.transformIn)),e.dom.el.style[f.features.transformProp]=o.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,n=[],i=[],o=e.mixer.config.animation.animateResizeTargets,s=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),n.push(e.writeTransitionRule(f.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&n.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),o&&(n.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),!t.callback)return e.mixer.targetsImmovable++,void(e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation));switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(n),o&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||i.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":s&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),i=i.concat(e.mixer.transformOut);break;case"show":s&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&i.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[f.features.transformProp]=i.join(" "),e.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(t,e,n){var i=this.getDelay(e),e="",e=t+" "+(0<n?n:this.mixer.config.animation.duration)+"ms "+i+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing);return this.callFilters("ruleWriteTransitionRule",e,arguments)},getDelay:function(t){var e,n=this;return"function"==typeof n.mixer.config.animation.staggerSequence&&(t=n.mixer.config.animation.staggerSequence.call(n,t,n.state)),e=n.mixer.staggerDuration?t*n.mixer.staggerDuration:0,n.callFilters("delayGetDelay",e,arguments)},applyTransition:function(t){t=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[f.features.transitionProp]=t,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,n=t.propertyName,i=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<n.indexOf("transform")||-1<n.indexOf("opacity")||i&&-1<n.indexOf("height")||i&&-1<n.indexOf("width")||i&&-1<n.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),h.off(t.dom.el,"webkitTransitionEnd",t.handler),h.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===f.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},h.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e,n,i=this,o=new f.StyleData;return i.callActions("beforeGetPosData",arguments),o.x=i.dom.el.offsetLeft,o.y=i.dom.el.offsetTop,(i.mixer.config.animation.animateResizeTargets||t)&&(n=i.dom.el.getBoundingClientRect(),o.top=n.top,o.right=n.right,o.bottom=n.bottom,o.left=n.left,o.width=n.width,o.height=n.height),i.mixer.config.animation.animateResizeTargets&&(e=p.getComputedStyle(i.dom.el),o.marginBottom=parseFloat(e.marginBottom),o.marginRight=parseFloat(e.marginRight)),i.callFilters("posDataGetPosData",o,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[f.features.transformProp]="",t.dom.el.style[f.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),f.Collection=function(t){var e,n=-1;for(this.callActions("beforeConstruct"),n=0;e=t[n];n++)this[n]=e;this.length=t.length,this.callActions("afterConstruct"),h.freeze(this)},f.BaseStatic.call(f.Collection),f.Collection.prototype=Object.create(f.Base.prototype),h.extend(f.Collection.prototype,{constructor:f.Collection,mixitup:function(t){var e=null,n=Array.prototype.slice.call(arguments),i=[],o=-1;for(this.callActions("beforeMixitup"),n.shift(),o=0;e=this[o];o++)i.push(e[t].apply(e,n));return this.callFilters("promiseMixitup",h.all(i,f.libraries),arguments)}}),f.Operation=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Operation),f.Operation.prototype=Object.create(f.Base.prototype),f.Operation.prototype.constructor=f.Operation,f.State=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.State),f.State.prototype=Object.create(f.Base.prototype),f.State.prototype.constructor=f.State,f.UserInstruction=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.UserInstruction),f.UserInstruction.prototype=Object.create(f.Base.prototype),f.UserInstruction.prototype.constructor=f.UserInstruction,f.Messages=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),h.seal(this)},f.BaseStatic.call(f.Messages),f.Messages.prototype=Object.create(f.Base.prototype),f.Messages.prototype.constructor=f.Messages,f.Messages.prototype.compileTemplates=function(){var t,e="";for(e in this)"string"==typeof(t=this[e])&&(this[h.camelCase(e)]=h.template(t))},f.messages=new f.Messages,f.Facade=function(t){f.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),h.freeze(this),h.seal(this)},f.BaseStatic.call(f.Facade),f.Facade.prototype=Object.create(f.Base.prototype),f.Facade.prototype.constructor=f.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=f:"function"==typeof define&&define.amd?define(function(){return f}):void 0!==p.mixitup&&"function"==typeof p.mixitup||(p.mixitup=f),f.BaseStatic.call(f.constructor),f.NAME="mixitup",f.CORE_VERSION="3.3.1"}(window),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){"use strict";var i,r=window.Slick||{};i=0,(r=function(t,e){var n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=c(t),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,t=c(t).data("slick")||{},n.options=c.extend({},n.defaults,e,t),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=c.proxy(n.autoPlay,n),n.autoPlayClear=c.proxy(n.autoPlayClear,n),n.autoPlayIterator=c.proxy(n.autoPlayIterator,n),n.changeSlide=c.proxy(n.changeSlide,n),n.clickHandler=c.proxy(n.clickHandler,n),n.selectHandler=c.proxy(n.selectHandler,n),n.setPosition=c.proxy(n.setPosition,n),n.swipeHandler=c.proxy(n.swipeHandler,n),n.dragHandler=c.proxy(n.dragHandler,n),n.keyHandler=c.proxy(n.keyHandler,n),n.instanceUid=i++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(t,e,n){var i=this;if("boolean"==typeof e)n=e,e=null;else if(e<0||e>=i.slideCount)return!1;i.unload(),"number"==typeof e?0===e&&0===i.$slides.length?c(t).appendTo(i.$slideTrack):n?c(t).insertBefore(i.$slides.eq(e)):c(t).insertAfter(i.$slides.eq(e)):!0===n?c(t).prependTo(i.$slideTrack):c(t).appendTo(i.$slideTrack),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),i.$slidesCache=i.$slides,i.reinit()},r.prototype.animateHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.animate({height:t},e.options.speed))},r.prototype.animateSlide=function(t,e){var n={},i=this;i.animateHeight(),!0===i.options.rtl&&!1===i.options.vertical&&(t=-t),!1===i.transformsEnabled?!1===i.options.vertical?i.$slideTrack.animate({left:t},i.options.speed,i.options.easing,e):i.$slideTrack.animate({top:t},i.options.speed,i.options.easing,e):!1===i.cssTransitions?(!0===i.options.rtl&&(i.currentLeft=-i.currentLeft),c({animStart:i.currentLeft}).animate({animStart:t},{duration:i.options.speed,easing:i.options.easing,step:function(t){t=Math.ceil(t),!1===i.options.vertical?n[i.animType]="translate("+t+"px, 0px)":n[i.animType]="translate(0px,"+t+"px)",i.$slideTrack.css(n)},complete:function(){e&&e.call()}})):(i.applyTransition(),t=Math.ceil(t),!1===i.options.vertical?n[i.animType]="translate3d("+t+"px, 0px, 0px)":n[i.animType]="translate3d(0px,"+t+"px, 0px)",i.$slideTrack.css(n),e&&setTimeout(function(){i.disableTransition(),e.call()},i.options.speed))},r.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=c(t).not(this.$slider)),t},r.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"==typeof t&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},r.prototype.applyTransition=function(t){var e=this,n={};!1===e.options.fade?n[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:n[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,(!1===e.options.fade?e.$slideTrack:e.$slides.eq(t)).css(n)},r.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},r.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var t,e,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)e.append(c("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=e.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},r.prototype.buildRows=function(){var t,e,n,i=this,o=document.createDocumentFragment(),s=i.$slider.children();if(0<i.options.rows){for(n=i.options.slidesPerRow*i.options.rows,e=Math.ceil(s.length/n),t=0;t<e;t++){for(var r=document.createElement("div"),a=0;a<i.options.rows;a++){for(var l=document.createElement("div"),c=0;c<i.options.slidesPerRow;c++){var d=t*n+(a*i.options.slidesPerRow+c);s.get(d)&&l.appendChild(s.get(d))}r.appendChild(l)}o.appendChild(r)}i.$slider.empty().append(o),i.$slider.children().children().children().css({width:100/i.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(t,e){var n,i,o,s=this,r=!1,a=s.$slider.width(),l=window.innerWidth||c(window).width();if("window"===s.respondTo?o=l:"slider"===s.respondTo?o=a:"min"===s.respondTo&&(o=Math.min(l,a)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(n in i=null,s.breakpoints)s.breakpoints.hasOwnProperty(n)&&(!1===s.originalSettings.mobileFirst?o<s.breakpoints[n]&&(i=s.breakpoints[n]):o>s.breakpoints[n]&&(i=s.breakpoints[n]));null!==i?null!==s.activeBreakpoint&&i===s.activeBreakpoint&&!e||(s.activeBreakpoint=i,"unslick"===s.breakpointSettings[i]?s.unslick(i):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[i]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),r=i):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),r=i),t||!1===r||s.$slider.trigger("breakpoint",[s,r])}},r.prototype.changeSlide=function(t,e){var n,i=this,o=c(t.currentTarget);switch(o.is("a")&&t.preventDefault(),o.is("li")||(o=o.closest("li")),n=i.slideCount%i.options.slidesToScroll!=0?0:(i.slideCount-i.currentSlide)%i.options.slidesToScroll,t.data.message){case"previous":s=0==n?i.options.slidesToScroll:i.options.slidesToShow-n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide-s,!1,e);break;case"next":s=0==n?i.options.slidesToScroll:n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide+s,!1,e);break;case"index":var s=0===t.data.index?0:t.data.index||o.index()*i.options.slidesToScroll;i.slideHandler(i.checkNavigable(s),!1,e),o.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(t){var e=this.getNavigableIndexes(),n=0;if(t>e[e.length-1])t=e[e.length-1];else for(var i in e){if(t<e[i]){t=n;break}n=e[i]}return t},r.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},r.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.cleanUpRows=function(){var t;0<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},r.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},r.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},r.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",(!1===this.options.fade?this.$slideTrack:this.$slides.eq(t)).css(e)},r.prototype.fadeSlide=function(t,e){var n=this;!1===n.cssTransitions?(n.$slides.eq(t).css({zIndex:n.options.zIndex}),n.$slides.eq(t).animate({opacity:1},n.options.speed,n.options.easing,e)):(n.applyTransition(t),n.$slides.eq(t).css({opacity:1,zIndex:n.options.zIndex}),e&&setTimeout(function(){n.disableTransition(t),e.call()},n.options.speed))},r.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},r.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){n.options.pauseOnFocus&&(n.focussed=e.is(":focus"),n.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var t=this,e=0,n=0,i=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++i;else for(;e<t.slideCount;)++i,e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)i=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++i,e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else i=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return i-1},r.prototype.getLeft=function(t){var e,n,i=this,o=0;return i.slideOffset=0,e=i.$slides.first().outerHeight(!0),!0===i.options.infinite?(i.slideCount>i.options.slidesToShow&&(i.slideOffset=i.slideWidth*i.options.slidesToShow*-1,n=-1,!0===i.options.vertical&&!0===i.options.centerMode&&(2===i.options.slidesToShow?n=-1.5:1===i.options.slidesToShow&&(n=-2)),o=e*i.options.slidesToShow*n),i.slideCount%i.options.slidesToScroll!=0&&t+i.options.slidesToScroll>i.slideCount&&i.slideCount>i.options.slidesToShow&&(o=t>i.slideCount?(i.slideOffset=(i.options.slidesToShow-(t-i.slideCount))*i.slideWidth*-1,(i.options.slidesToShow-(t-i.slideCount))*e*-1):(i.slideOffset=i.slideCount%i.options.slidesToScroll*i.slideWidth*-1,i.slideCount%i.options.slidesToScroll*e*-1))):t+i.options.slidesToShow>i.slideCount&&(i.slideOffset=(t+i.options.slidesToShow-i.slideCount)*i.slideWidth,o=(t+i.options.slidesToShow-i.slideCount)*e),i.slideCount<=i.options.slidesToShow&&(o=i.slideOffset=0),!0===i.options.centerMode&&i.slideCount<=i.options.slidesToShow?i.slideOffset=i.slideWidth*Math.floor(i.options.slidesToShow)/2-i.slideWidth*i.slideCount/2:!0===i.options.centerMode&&!0===i.options.infinite?i.slideOffset+=i.slideWidth*Math.floor(i.options.slidesToShow/2)-i.slideWidth:!0===i.options.centerMode&&(i.slideOffset=0,i.slideOffset+=i.slideWidth*Math.floor(i.options.slidesToShow/2)),e=!1===i.options.vertical?t*i.slideWidth*-1+i.slideOffset:t*e*-1+o,!0===i.options.variableWidth&&(o=i.slideCount<=i.options.slidesToShow||!1===i.options.infinite?i.$slideTrack.children(".slick-slide").eq(t):i.$slideTrack.children(".slick-slide").eq(t+i.options.slidesToShow),e=!0===i.options.rtl?o[0]?-1*(i.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===i.options.centerMode&&(o=i.slideCount<=i.options.slidesToShow||!1===i.options.infinite?i.$slideTrack.children(".slick-slide").eq(t):i.$slideTrack.children(".slick-slide").eq(t+i.options.slidesToShow+1),e=!0===i.options.rtl?o[0]?-1*(i.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,e+=(i.$list.width()-o.outerWidth())/2)),e},r.prototype.getOption=r.prototype.slickGetOption=function(t){return this.options[t]},r.prototype.getNavigableIndexes=function(){for(var t=this,e=0,n=0,i=[],o=!1===t.options.infinite?t.slideCount:(e=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,2*t.slideCount);e<o;)i.push(e),e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return i},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var n,i=this,o=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0;return!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-o+c(e).outerWidth()/2>-1*i.swipeLeft)return n=e,!1}),Math.abs(c(n).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},r.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},r.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),o=n.getNavigableIndexes().filter(function(t){return 0<=t&&t<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(t){var e=o.indexOf(t);c(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+t,tabindex:-1}),-1!==e&&(e="slick-slide-control"+n.instanceUid+e,c("#"+e).length&&c(this).attr({"aria-describedby":e}))}),n.$dots.attr("role","tablist").find("li").each(function(t){var e=o[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+t,"aria-controls":"slick-slide"+n.instanceUid+e,"aria-label":t+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=n.currentSlide,e=t+n.options.slidesToShow;t<e;t++)n.options.focusOnChange?n.$slides.eq(t).attr({tabindex:"0"}):n.$slides.eq(t).removeAttr("tabindex");n.activateADA()},r.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},r.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},r.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},r.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},r.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var t,e,n,s=this;function i(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),i=c(this).attr("data-sizes")||s.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){t.animate({opacity:0},100,function(){n&&(t.attr("srcset",n),i&&t.attr("sizes",i)),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,t,e])})},o.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,e])},o.src=e})}if(!0===s.options.centerMode?n=!0===s.options.infinite?(e=s.currentSlide+(s.options.slidesToShow/2+1))+s.options.slidesToShow+2:(e=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),s.options.slidesToShow/2+1+2+s.currentSlide):(e=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,n=Math.ceil(e+s.options.slidesToShow),!0===s.options.fade&&(0<e&&e--,n<=s.slideCount&&n++)),t=s.$slider.find(".slick-slide").slice(e,n),"anticipated"===s.options.lazyLoad)for(var o=e-1,r=n,a=s.$slider.find(".slick-slide"),l=0;l<s.options.slidesToScroll;l++)o<0&&(o=s.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(r)),o--,r++;i(t),s.slideCount<=s.options.slidesToShow?i(s.$slider.find(".slick-slide")):s.currentSlide>=s.slideCount-s.options.slidesToShow?i(s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow)):0===s.currentSlide&&i(s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow))},r.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},r.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(t){t.preventDefault()},r.prototype.progressiveLazyLoad=function(t){t=t||1;var e,n,i,o,s=this,r=c("img[data-lazy]",s.$slider);r.length?(e=r.first(),n=e.attr("data-lazy"),i=e.attr("data-srcset"),o=e.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){i&&(e.attr("srcset",i),o&&e.attr("sizes",o)),e.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,e,n]),s.progressiveLazyLoad()},r.onerror=function(){t<3?setTimeout(function(){s.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,e,n]),s.progressiveLazyLoad())},r.src=n):s.$slider.trigger("allImagesLoaded",[s])},r.prototype.refresh=function(t){var e=this,n=e.slideCount-e.options.slidesToShow;!e.options.infinite&&e.currentSlide>n&&(e.currentSlide=n),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),n=e.currentSlide,e.destroy(!0),c.extend(e,e.initials,{currentSlide:n}),e.init(),t||e.changeSlide({data:{message:"index",index:n}},!1)},r.prototype.registerBreakpoints=function(){var t,e,n,i=this,o=i.options.responsive||null;if("array"===c.type(o)&&o.length){for(t in i.respondTo=i.options.respondTo||"window",o)if(n=i.breakpoints.length-1,o.hasOwnProperty(t)){for(e=o[t].breakpoint;0<=n;)i.breakpoints[n]&&i.breakpoints[n]===e&&i.breakpoints.splice(n,1),n--;i.breakpoints.push(e),i.breakpointSettings[e]=o[t].settings}i.breakpoints.sort(function(t,e){return i.options.mobileFirst?t-e:e-t})}},r.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},r.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(t,e,n){var i=this;if(t="boolean"==typeof t?!0===(e=t)?0:i.slideCount-1:!0===e?--t:t,i.slideCount<1||t<0||t>i.slideCount-1)return!1;i.unload(),(!0===n?i.$slideTrack.children():i.$slideTrack.children(this.options.slide).eq(t)).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},r.prototype.setCSS=function(t){var e,n,i=this,o={};!0===i.options.rtl&&(t=-t),e="left"==i.positionProp?Math.ceil(t)+"px":"0px",n="top"==i.positionProp?Math.ceil(t)+"px":"0px",o[i.positionProp]=t,!1===i.transformsEnabled||(!(o={})===i.cssTransitions?o[i.animType]="translate("+e+", "+n+")":o[i.animType]="translate3d("+e+", "+n+", 0px)"),i.$slideTrack.css(o)},r.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},r.prototype.setFade=function(){var n,i=this;i.$slides.each(function(t,e){n=i.slideWidth*t*-1,!0===i.options.rtl?c(e).css({position:"relative",right:n,top:0,zIndex:i.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:n,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.css("height",t))},r.prototype.setOption=r.prototype.slickSetOption=function(){var t,e,n,i,o,s=this,r=!1;if("object"===c.type(arguments[0])?(n=arguments[0],r=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(i=arguments[1],r=arguments[2],"responsive"===(n=arguments[0])&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)s.options[n]=i;else if("multiple"===o)c.each(n,function(t,e){s.options[t]=e});else if("responsive"===o)for(e in i)if("array"!==c.type(s.options.responsive))s.options.responsive=[i[e]];else{for(t=s.options.responsive.length-1;0<=t;)s.options.responsive[t].breakpoint===i[e].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(i[e])}r&&(s.unload(),s.reinit())},r.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},r.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},r.prototype.setSlideClasses=function(t){var e,n,i,o=this,s=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true");o.$slides.eq(t).addClass("slick-current"),!0===o.options.centerMode?(n=o.options.slidesToShow%2==0?1:0,i=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&(i<=t&&t<=o.slideCount-1-i?o.$slides.slice(t-i+n,t+i+1).addClass("slick-active").attr("aria-hidden","false"):(e=o.options.slidesToShow+t,s.slice(e-i+1+n,e+i+2).addClass("slick-active").attr("aria-hidden","false")),0===t?s.eq(s.length-1-o.options.slidesToShow).addClass("slick-center"):t===o.slideCount-1&&s.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(t).addClass("slick-center")):0<=t&&t<=o.slideCount-o.options.slidesToShow?o.$slides.slice(t,t+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):s.length<=o.options.slidesToShow?s.addClass("slick-active").attr("aria-hidden","false"):(i=o.slideCount%o.options.slidesToShow,e=!0===o.options.infinite?o.options.slidesToShow+t:t,(o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-t<o.options.slidesToShow?s.slice(e-(o.options.slidesToShow-i),e+i):s.slice(e,e+o.options.slidesToShow)).addClass("slick-active").attr("aria-hidden","false")),"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},r.prototype.setupInfinite=function(){var t,e,n,i=this;if(!0===i.options.fade&&(i.options.centerMode=!1),!0===i.options.infinite&&!1===i.options.fade&&(e=null,i.slideCount>i.options.slidesToShow)){for(n=!0===i.options.centerMode?i.options.slidesToShow+1:i.options.slidesToShow,t=i.slideCount;t>i.slideCount-n;--t)e=t-1,c(i.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e-i.slideCount).prependTo(i.$slideTrack).addClass("slick-cloned");for(t=0;t<n+i.slideCount;t+=1)e=t,c(i.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+i.slideCount).appendTo(i.$slideTrack).addClass("slick-cloned");i.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},r.prototype.selectHandler=function(t){t=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),t=(t=parseInt(t.attr("data-slick-index")))||0;this.slideCount<=this.options.slidesToShow?this.slideHandler(t,!1,!0):this.slideHandler(t)},r.prototype.slideHandler=function(t,e,n){var i,o,s,r,a=this;if(e=e||!1,!(!0===a.animating&&!0===a.options.waitForAnimate||!0===a.options.fade&&a.currentSlide===t))if(!1===e&&a.asNavFor(t),i=t,s=a.getLeft(i),e=a.getLeft(a.currentSlide),a.currentLeft=null===a.swipeLeft?e:a.swipeLeft,!1===a.options.infinite&&!1===a.options.centerMode&&(t<0||t>a.getDotCount()*a.options.slidesToScroll))!1===a.options.fade&&(i=a.currentSlide,!0!==n&&a.slideCount>a.options.slidesToShow?a.animateSlide(e,function(){a.postSlide(i)}):a.postSlide(i));else if(!1===a.options.infinite&&!0===a.options.centerMode&&(t<0||t>a.slideCount-a.options.slidesToScroll))!1===a.options.fade&&(i=a.currentSlide,!0!==n&&a.slideCount>a.options.slidesToShow?a.animateSlide(e,function(){a.postSlide(i)}):a.postSlide(i));else{if(a.options.autoplay&&clearInterval(a.autoPlayTimer),o=i<0?a.slideCount%a.options.slidesToScroll!=0?a.slideCount-a.slideCount%a.options.slidesToScroll:a.slideCount+i:i>=a.slideCount?a.slideCount%a.options.slidesToScroll!=0?0:i-a.slideCount:i,a.animating=!0,a.$slider.trigger("beforeChange",[a,a.currentSlide,o]),e=a.currentSlide,a.currentSlide=o,a.setSlideClasses(a.currentSlide),a.options.asNavFor&&(r=(r=a.getNavTarget()).slick("getSlick")).slideCount<=r.options.slidesToShow&&r.setSlideClasses(a.currentSlide),a.updateDots(),a.updateArrows(),!0===a.options.fade)return!0!==n?(a.fadeSlideOut(e),a.fadeSlide(o,function(){a.postSlide(o)})):a.postSlide(o),void a.animateHeight();!0!==n&&a.slideCount>a.options.slidesToShow?a.animateSlide(s,function(){a.postSlide(o)}):a.postSlide(o)}},r.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var t=this,e=t.touchObject.startX-t.touchObject.curX,n=t.touchObject.startY-t.touchObject.curY,e=Math.atan2(n,e),e=Math.round(180*e/Math.PI);return e<0&&(e=360-Math.abs(e)),e<=45&&0<=e||e<=360&&315<=e?!1===t.options.rtl?"left":"right":135<=e&&e<=225?!1===t.options.rtl?"right":"left":!0===t.options.verticalSwiping?35<=e&&e<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(t){var e,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1;if(i.interrupted=!1,i.shouldClick=!(10<i.touchObject.swipeLength),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(e),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},r.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},r.prototype.swipeMove=function(t){var e,n,i=this,o=void 0!==t.originalEvent?t.originalEvent.touches:null;return!(!i.dragging||i.scrolling||o&&1!==o.length)&&(e=i.getLeft(i.currentSlide),i.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,i.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,i.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(i.touchObject.curX-i.touchObject.startX,2))),n=Math.round(Math.sqrt(Math.pow(i.touchObject.curY-i.touchObject.startY,2))),!i.options.verticalSwiping&&!i.swiping&&4<n?!(i.scrolling=!0):(!0===i.options.verticalSwiping&&(i.touchObject.swipeLength=n),o=i.swipeDirection(),void 0!==t.originalEvent&&4<i.touchObject.swipeLength&&(i.swiping=!0,t.preventDefault()),n=(!1===i.options.rtl?1:-1)*(i.touchObject.curX>i.touchObject.startX?1:-1),!0===i.options.verticalSwiping&&(n=i.touchObject.curY>i.touchObject.startY?1:-1),t=i.touchObject.swipeLength,(i.touchObject.edgeHit=!1)===i.options.infinite&&(0===i.currentSlide&&"right"===o||i.currentSlide>=i.getDotCount()&&"left"===o)&&(t=i.touchObject.swipeLength*i.options.edgeFriction,i.touchObject.edgeHit=!0),!1===i.options.vertical?i.swipeLeft=e+t*n:i.swipeLeft=e+t*(i.$list.height()/i.listWidth)*n,!0===i.options.verticalSwiping&&(i.swipeLeft=e+t*n),!0!==i.options.fade&&!1!==i.options.touchMove&&(!0===i.animating?(i.swipeLeft=null,!1):void i.setCSS(i.swipeLeft))))},r.prototype.swipeStart=function(t){var e,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return!(n.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==e?e.pageX:t.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==e?e.pageY:t.clientY,n.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},r.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},r.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2);!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){for(var t,e=this,n=arguments[0],i=Array.prototype.slice.call(arguments,1),o=e.length,s=0;s<o;s++)if("object"==typeof n||void 0===n?e[s].slick=new r(e[s],n):t=e[s].slick[n].apply(e[s].slick,i),void 0!==t)return t;return e}}),function(l,r,h,g){"use strict";var o,s,a,d,e,c,p,u,i,t,n,f,m;function v(t,e){var n,i,o,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=u(t.data.options,e)),n=e.$target||h(t.currentTarget).trigger("blur"),(o=h.fancybox.getInstance())&&o.$trigger&&o.$trigger.is(n)||(s=e.selector?h(e.selector):(i=n.attr("data-fancybox")||"")?(s=t.data?t.data.items:[]).length?s.filter('[data-fancybox="'+i+'"]'):h('[data-fancybox="'+i+'"]'):[n],(r=h(s).index(n))<0&&(r=0),(o=h.fancybox.open(s,e,r)).$trigger=n))}l.console=l.console||{info:function(t){}},h&&(h.fn.fancybox?console.info("fancyBox already initialized"):(t={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:h.noop,beforeLoad:h.noop,afterLoad:h.noop,beforeShow:h.noop,afterShow:h.noop,beforeClose:h.noop,afterClose:h.noop,onActivate:h.noop,onDeactivate:h.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},o=h(l),s=h(r),a=0,d=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(t){return l.setTimeout(t,1e3/60)},e=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(t){l.clearTimeout(t)},c=function(){var t,e=r.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in n)if(e.style[t]!==g)return n[t];return"transitionend"}(),p=function(t){return t&&t.length&&t[0].offsetHeight},u=function(t,e){var n=h.extend(!0,{},t,e);return h.each(e,function(t,e){h.isArray(e)&&(n[t]=e)}),n},i=function(t,e,n){var i=this;i.opts=u({index:n},h.fancybox.defaults),h.isPlainObject(e)&&(i.opts=u(i.opts,e)),h.fancybox.isMobile&&(i.opts=u(i.opts,i.opts.mobile)),i.id=i.opts.id||++a,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(t),i.group.length&&i.init()},h.extend(i.prototype,{init:function(){var e,n,i=this,o=i.group[i.currIndex].opts;o.closeExisting&&h.fancybox.close(!0),h("body").addClass("fancybox-active"),!h.fancybox.getInstance()&&!1!==o.hideScrollbar&&!h.fancybox.isMobile&&r.body.scrollHeight>l.innerHeight&&(h("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-r.documentElement.clientWidth)+"px;}</style>"),h("body").addClass("compensate-for-scrollbar")),n="",h.each(o.buttons,function(t,e){n+=o.btnTpl[e]||""}),e=h(i.translate(i,o.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",o.btnTpl.arrowLeft+o.btnTpl.arrowRight))).attr("id","fancybox-container-"+i.id).addClass(o.baseClass).data("FancyBox",i).appendTo(o.parentEl),i.$refs={container:e},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){i.$refs[t]=e.find(".fancybox-"+t)}),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return n[e]===g?t:n[e]})},addContent:function(t){var a=this,t=h.makeArray(t);h.each(t,function(t,e){var n,i,o,s={},r={};h.isPlainObject(e)?r=(s=e).opts||e:"object"===h.type(e)&&h(e).length?(r=(i=h(e)).data()||{},(r=h.extend(!0,{},r,r.options)).$orig=i,s.src=a.opts.src||r.src||i.attr("href"),s.type||s.src||(s.type="inline",s.src=e)):s={type:"html",src:e+""},s.opts=h.extend(!0,{},a.opts,r),h.isArray(r.buttons)&&(s.opts.buttons=r.buttons),h.fancybox.isMobile&&s.opts.mobile&&(s.opts=u(s.opts,s.opts.mobile)),n=s.type||s.opts.type,i=s.src||"",!n&&i&&((r=i.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(n="video",s.opts.video.format||(s.opts.video.format="video/"+("ogv"===r[1]?"ogg":r[1]))):i.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":i.match(/\.(pdf)((\?|#).*)?$/i)?(n="iframe",s=h.extend(!0,s,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===i.charAt(0)&&(n="inline")),n?s.type=n:a.trigger("objectNeedsType",s),s.contentType||(s.contentType=-1<h.inArray(s.type,["html","inline","ajax"])?"html":s.type),s.index=a.group.length,"auto"==s.opts.smallBtn&&(s.opts.smallBtn=-1<h.inArray(s.type,["html","inline","ajax"])),"auto"===s.opts.toolbar&&(s.opts.toolbar=!s.opts.smallBtn),s.$thumb=s.opts.$thumb||null,s.opts.$trigger&&s.index===a.opts.index&&(s.$thumb=s.opts.$trigger.find("img:first"),s.$thumb.length&&(s.opts.$orig=s.opts.$trigger)),s.$thumb&&s.$thumb.length||!s.opts.$orig||(s.$thumb=s.opts.$orig.find("img:first")),s.$thumb&&!s.$thumb.length&&(s.$thumb=null),s.thumb=s.opts.thumb||(s.$thumb?s.$thumb[0].src:null),"function"===h.type(s.opts.caption)&&(s.opts.caption=s.opts.caption.apply(e,[a,s])),"function"===h.type(a.opts.caption)&&(s.opts.caption=a.opts.caption.apply(e,[a,s])),s.opts.caption instanceof h||(s.opts.caption=s.opts.caption===g?"":s.opts.caption+""),"ajax"===s.type&&1<(o=i.split(/\s+/,2)).length&&(s.src=o.shift(),s.opts.filter=o.shift()),s.opts.modal&&(s.opts=h.extend(!0,s.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),a.group.push(s)}),Object.keys(a.slides).length&&(a.updateControls(),(t=a.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),i.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),i.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(t){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),o.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(i.requestId&&e(i.requestId),i.requestId=d(function(){i.update(t)})):(i.current&&"iframe"===i.current.type&&i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update(t)},h.fancybox.isMobile?600:250))}),s.on("keydown.fb",function(t){var e=(h.fancybox?h.fancybox.getInstance():null).current,n=t.keyCode||t.which;if(9!=n){if(!(!e.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||h(t.target).is("input,textarea,video,audio,select")))return 8===n||27===n?(t.preventDefault(),void i.close(t)):37===n||38===n?(t.preventDefault(),void i.previous()):39===n||40===n?(t.preventDefault(),void i.next()):void i.trigger("afterKeydown",t,n)}else e.opts.trapFocus&&i.focus(t)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,s.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=l.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){o.off("orientationchange.fb resize.fb"),s.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,i){var e,n,o,s,r,a,l,c,d=this,u=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun))return t=parseInt(t,10),!(!(n=(d.current||d).opts.loop)&&(t<0||u<=t))&&(e=d.firstRun=!Object.keys(d.slides).length,s=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,o=d.createSlide(t),1<u&&((n||o.index<u-1)&&d.createSlide(t+1),(n||0<o.index)&&d.createSlide(t-1)),d.current=o,d.currIndex=o.index,d.currPos=o.pos,d.trigger("beforeShow",e),d.updateControls(),o.forcedDuration=g,h.isNumeric(i)?o.forcedDuration=i:i=o.opts[e?"animationDuration":"transitionDuration"],i=parseInt(i,10),t=d.isMoved(o),o.$slide.addClass("fancybox-slide--current"),e?(o.opts.animationEffect&&i&&d.$refs.container.css("transition-duration",i+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(o)):(r=h.fancybox.getTranslate(s.$slide),a=h.fancybox.getTranslate(d.$refs.stage),h.each(d.slides,function(t,e){h.fancybox.stop(e.$slide,!0)}),s.pos!==o.pos&&(s.isComplete=!1),s.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),t?(c=r.left-(s.pos*r.width+s.pos*s.opts.gutter),h.each(d.slides,function(t,e){e.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=e.pos*r.width+e.pos*e.opts.gutter;h.fancybox.setTranslate(e.$slide,{top:0,left:n-a.left+c}),e.pos!==o.pos&&e.$slide.addClass("fancybox-slide--"+(e.pos>o.pos?"next":"previous")),p(e.$slide),h.fancybox.animate(e.$slide,{top:0,left:(e.pos-o.pos)*r.width+(e.pos-o.pos)*e.opts.gutter},i,function(){e.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),e.pos===d.currPos&&d.complete()})})):i&&o.opts.transitionEffect&&(l="fancybox-animated fancybox-fx-"+o.opts.transitionEffect,s.$slide.addClass("fancybox-slide--"+(s.pos>o.pos?"next":"previous")),h.fancybox.animate(s.$slide,l,i,function(){s.$slide.removeClass(l).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),o.isLoaded?d.revealContent(o):d.loadSlide(o)),void d.preload("image"))},createSlide:function(t){var e,n=this,i=t%n.group.length;return i=i<0?n.group.length+i:i,!n.slides[t]&&n.group[i]&&(e=h('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[t]=h.extend(!0,{},n.group[i],{pos:t,$slide:e,isLoaded:!1}),n.updateSlide(n.slides[t])),n.slides[t]},scaleToActual:function(t,e,n){var i,o,s,r,a=this,l=a.current,c=l.$content,d=h.fancybox.getTranslate(l.$slide).width,u=h.fancybox.getTranslate(l.$slide).height,p=l.width,f=l.height;a.isAnimating||a.isMoved()||!c||"image"!=l.type||!l.isLoaded||l.hasError||(a.isAnimating=!0,h.fancybox.stop(c),t=t===g?.5*d:t,e=e===g?.5*u:e,(i=h.fancybox.getTranslate(c)).top-=h.fancybox.getTranslate(l.$slide).top,i.left-=h.fancybox.getTranslate(l.$slide).left,s=p/i.width,r=f/i.height,o=.5*d-.5*p,l=.5*u-.5*f,d<p&&(0<(o=i.left*s-(t*s-t))&&(o=0),o<d-p&&(o=d-p)),u<f&&(0<(l=i.top*r-(e*r-e))&&(l=0),l<u-f&&(l=u-f)),a.updateCursor(p,f),h.fancybox.animate(c,{top:l,left:o,scaleX:s,scaleY:r},n||366,function(){a.isAnimating=!1}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop())},scaleToFit:function(t){var e=this,n=e.current,i=n.$content;e.isAnimating||e.isMoved()||!i||"image"!=n.type||!n.isLoaded||n.hasError||(e.isAnimating=!0,h.fancybox.stop(i),n=e.getFitPos(n),e.updateCursor(n.width,n.height),h.fancybox.animate(i,{top:n.top,left:n.left,scaleX:n.width/i.width(),scaleY:n.height/i.height()},t||366,function(){e.isAnimating=!1}))},getFitPos:function(t){var e,n,i=t.$content,o=t.$slide,s=t.width||t.opts.width,r=t.height||t.opts.height,a={};return!!(t.isLoaded&&i&&i.length)&&(e=h.fancybox.getTranslate(this.$refs.stage).width,n=h.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(o.css("paddingLeft"))+parseFloat(o.css("paddingRight"))+parseFloat(i.css("marginLeft"))+parseFloat(i.css("marginRight")),n-=parseFloat(o.css("paddingTop"))+parseFloat(o.css("paddingBottom"))+parseFloat(i.css("marginTop"))+parseFloat(i.css("marginBottom")),s&&r||(s=e,r=n),e-.5<(s*=i=Math.min(1,e/s,n/r))&&(s=e),n-.5<(r*=i)&&(r=n),"image"===t.type?(a.top=Math.floor(.5*(n-r))+parseFloat(o.css("paddingTop")),a.left=Math.floor(.5*(e-s))+parseFloat(o.css("paddingLeft"))):"video"===t.contentType&&(s/(t=t.opts.width&&t.opts.height?s/r:t.opts.ratio||16/9)<r?r=s/t:r*t<s&&(s=r*t)),a.width=s,a.height=r,a)},update:function(n){var i=this;h.each(i.slides,function(t,e){i.updateSlide(e,n)})},updateSlide:function(t,e){var n=this,i=t&&t.$content,o=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;n.adjustCaption(t),i&&(o||s||"video"===t.contentType)&&!t.hasError&&(h.fancybox.stop(i),h.fancybox.setTranslate(i,n.getFitPos(t)),t.pos===n.currPos&&(n.isAnimating=!1,n.updateCursor())),n.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===n.currPos&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),n.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,n=e.current,i=n.$slide;!e.isClosing&&n&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),h.fancybox.animate(i,{top:0,left:0,opacity:1},t===g?0:t,function(){i.css({transform:"",opacity:""}),n.isComplete||e.complete()},!1))},isMoved:function(t){var e,n=t||this.current;return!!n&&(e=h.fancybox.getTranslate(this.$refs.stage),t=h.fancybox.getTranslate(n.$slide),!n.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-e.top)||.5<Math.abs(t.left-e.left)))},updateCursor:function(t,e){var n=this,i=n.current,o=n.$refs.container;i&&!n.isClosing&&n.Guestures&&(o.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),e=!!(t=n.canPan(t,e))||n.isZoomable(),o.toggleClass("fancybox-is-zoomable",e),h("[data-fancybox-zoom]").prop("disabled",!e),t?o.addClass("fancybox-can-pan"):e&&("zoom"===i.opts.clickContent||h.isFunction(i.opts.clickContent)&&"zoom"==i.opts.clickContent(i))?o.addClass("fancybox-can-zoomIn"):i.opts.touch&&(i.opts.touch.vertical||1<n.group.length)&&"video"!==i.contentType&&o.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var n=!1,i=this.current,o=i.$content;return t!==g&&e!==g?n=t<i.width&&e<i.height:o&&(n=(n=h.fancybox.getTranslate(o)).width<i.width&&n.height<i.height),n},canPan:function(t,e){var n=this.current,i=null,o=!1;return"image"===n.type&&(n.isComplete||t&&e)&&!n.hasError&&(o=this.getFitPos(n),t!==g&&e!==g?i={width:t,height:e}:n.isComplete&&(i=h.fancybox.getTranslate(n.$content)),i&&o&&(o=1.5<Math.abs(i.width-o.width)||1.5<Math.abs(i.height-o.height))),o},loadSlide:function(n){var t,e,i,o=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===o.trigger("beforeLoad",n))return n.isLoading=!1;switch(t=n.type,(e=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),t){case"image":o.setImage(n);break;case"iframe":o.setIframe(n);break;case"html":o.setContent(n,n.src||n.content);break;case"video":o.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":h(n.src).length?o.setContent(n,h(n.src)):o.setError(n);break;case"ajax":o.showLoading(n),i=h.ajax(h.extend({},n.opts.ajax.settings,{url:n.src,success:function(t,e){"success"===e&&o.setContent(n,t)},error:function(t,e){t&&"abort"!==e&&o.setError(n)}})),e.one("onReset",function(){i.abort()});break;default:o.setError(n)}return!0}},setImage:function(e){var t,n=this;setTimeout(function(){var t=e.$image;n.isClosing||!e.isLoading||t&&t.length&&t[0].complete||e.hasError||n.showLoading(e)},50),n.checkSrcset(e),e.$content=h('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide.addClass("fancybox-slide--image")),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&e.thumb&&(e.width=e.opts.width,e.height=e.opts.height,(t=r.createElement("img")).onerror=function(){h(this).remove(),e.$ghost=null},t.onload=function(){n.afterLoad(e)},e.$ghost=h(t).addClass("fancybox-image").appendTo(e.$content).attr("src",e.thumb)),n.setBigImage(e)},checkSrcset:function(t){var e,n,i,o,s=t.opts.srcset||t.opts.image.srcset;if(s){i=l.devicePixelRatio||1,o=l.innerWidth*i,(n=s.split(",").map(function(t){var i={};return t.trim().split(/\s+/).forEach(function(t,e){var n=parseInt(t.substring(0,t.length-1),10);if(0===e)return i.url=t;n&&(i.value=n,i.postfix=t[t.length-1])}),i})).sort(function(t,e){return t.value-e.value});for(var r=0;r<n.length;r++){var a=n[r];if("w"===a.postfix&&a.value>=o||"x"===a.postfix&&a.value>=i){e=a;break}}!e&&n.length&&(e=n[n.length-1]),e&&(t.src=e.url,t.width&&t.height&&"w"==e.postfix&&(t.height=t.width/t.height*e.value,t.width=e.value),t.opts.srcset=s)}},setBigImage:function(e){var n=this,t=r.createElement("img"),i=h(t);e.$image=i.one("error",function(){n.setError(e)}).one("load",function(){var t;e.$ghost||(n.resolveImageSlideSize(e,this.naturalWidth,this.naturalHeight),n.afterLoad(e)),n.isClosing||(e.opts.srcset&&((t=e.opts.sizes)&&"auto"!==t||(t=(1<e.width/e.height&&1<o.width()/o.height()?"100":Math.round(e.width/e.height*100))+"vw"),i.attr("sizes",t).attr("srcset",e.opts.srcset)),e.$ghost&&setTimeout(function(){e.$ghost&&!n.isClosing&&e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))),n.hideLoading(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(t.complete||"complete"==t.readyState)&&i.naturalWidth&&i.naturalHeight?i.trigger("load"):t.error&&i.trigger("error")},resolveImageSlideSize:function(t,e,n){var i=parseInt(t.opts.width,10),o=parseInt(t.opts.height,10);t.width=e,t.height=n,0<i&&(t.width=i,t.height=Math.floor(i*n/e)),0<o&&(t.width=Math.floor(o*e/n),t.height=o)},setIframe:function(o){var s,e=this,r=o.opts.iframe,a=o.$slide;o.$content=h('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(a),a.addClass("fancybox-slide--"+o.contentType),o.$iframe=s=h(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(o.$content),r.preload?(e.showLoading(o),s.on("load.fb error.fb",function(t){this.isReady=1,o.$slide.trigger("refresh"),e.afterLoad(o)}),a.on("refresh.fb",function(){var t,e=o.$content,n=r.css.width,i=r.css.height;if(1===s[0].isReady){try{t=s.contents().find("body")}catch(t){}t&&t.length&&t.children().length&&(a.css("overflow","visible"),e.css({width:"100%","max-width":"100%",height:"9999px"}),n===g&&(n=Math.ceil(Math.max(t[0].clientWidth,t.outerWidth(!0)))),e.css("width",n||"").css("max-width",""),i===g&&(i=Math.ceil(Math.max(t[0].clientHeight,t.outerHeight(!0)))),e.css("height",i||""),a.css("overflow","auto")),e.removeClass("fancybox-is-hidden")}})):e.afterLoad(o),s.attr("src",o.src),a.one("onReset",function(){try{h(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}h(this).off("refresh.fb").empty(),o.isLoaded=!1,o.isRevealed=!1})},setContent:function(t,e){var n;this.isClosing||(this.hideLoading(t),t.$content&&h.fancybox.stop(t.$content),t.$slide.empty(),(n=e)&&n.hasOwnProperty&&n instanceof h&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=h("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===h.type(e)&&(e=h("<div>").append(h.trim(e)).contents()),t.opts.filter&&(e=h("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){h(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(h(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),h(e).appendTo(t.$slide),h(e).is("video,audio")&&(h(e).addClass("fancybox-video"),h(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||h(e).attr("width"),t.opts.height=t.opts.height||h(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=h(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=h(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&h('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.adjustCaption(t),e.adjustLayout(t),t.pos===e.currPos&&e.updateCursor(),e.revealContent(t))},adjustCaption:function(t){var e=this,n=t||e.current,i=n.opts.caption,o=n.opts.preventCaptionOverlap,s=e.$refs.caption,t=!1;s.toggleClass("fancybox-caption--separate",o),o&&i&&i.length&&(n.pos!==e.currPos?((s=s.clone().appendTo(s.parent())).children().eq(0).empty().html(i),t=s.outerHeight(!0),s.empty().remove()):e.$caption&&(t=e.$caption.outerHeight(!0)),n.$slide.css("padding-bottom",t||""))},adjustLayout:function(t){var e,n,i,o=t||this.current;o.isLoaded&&!0!==o.opts.disableLayoutFix&&(o.$content.css("margin-bottom",""),o.$content.outerHeight()>o.$slide.height()+.5&&(n=o.$slide[0].style["padding-bottom"],i=o.$slide.css("padding-bottom"),0<parseFloat(i)&&(t=o.$slide[0].scrollHeight,o.$slide.css("padding-bottom",0),Math.abs(t-o.$slide[0].scrollHeight)<1&&(e=i),o.$slide.css("padding-bottom",n))),o.$content.css("margin-bottom",e))},revealContent:function(t){var e,n,i,o,s=this,r=t.$slide,a=!1,l=!1,c=s.isMoved(t),d=t.isRevealed;return t.isRevealed=!0,e=t.opts[s.firstRun?"animationEffect":"transitionEffect"],i=t.opts[s.firstRun?"animationDuration":"transitionDuration"],i=parseInt(t.forcedDuration===g?i:t.forcedDuration,10),!c&&t.pos===s.currPos&&i||(e=!1),"zoom"===e&&(t.pos===s.currPos&&i&&"image"===t.type&&!t.hasError&&(l=s.getThumbPos(t))?a=s.getFitPos(t):e="fade"),"zoom"===e?(s.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,"auto"==(o=t.opts.zoomOpacity)&&(o=.1<Math.abs(t.width/t.height-l.width/l.height)),o&&(l.opacity=.1,a.opacity=1),h.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),p(t.$content),void h.fancybox.animate(t.$content,a,i,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(t),e?(h.fancybox.stop(r),n="fancybox-slide--"+(t.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(n).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),p(r),"image"!==t.type&&t.$content.hide().show(0),void h.fancybox.animate(r,"fancybox-slide--current",i,function(){r.removeClass(n).css({transform:"",opacity:""}),t.pos===s.currPos&&s.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===s.currPos&&s.complete())))},getThumbPos:function(t){var e,n,i,o,s=t.$thumb;return!!(s&&(i=s[0])&&i.ownerDocument===r&&(h(".fancybox-container").css("pointer-events","none"),o={x:i.getBoundingClientRect().left+i.offsetWidth/2,y:i.getBoundingClientRect().top+i.offsetHeight/2},i=r.elementFromPoint(o.x,o.y)===i,h(".fancybox-container").css("pointer-events",""),i))&&(n=h.fancybox.getTranslate(s),t=parseFloat(s.css("border-top-width")||0),o=parseFloat(s.css("border-right-width")||0),i=parseFloat(s.css("border-bottom-width")||0),s=parseFloat(s.css("border-left-width")||0),e={top:n.top+t,left:n.left+s,width:n.width-o-s,height:n.height-t-i,scaleX:1,scaleY:1},0<n.width&&0<n.height&&e)},complete:function(){var t,n=this,e=n.current,i={};!n.isMoved()&&e.isLoaded&&(e.isComplete||(e.isComplete=!0,e.$slide.siblings().trigger("onReset"),n.preload("inline"),p(e.$slide),e.$slide.addClass("fancybox-slide--complete"),h.each(n.slides,function(t,e){e.pos>=n.currPos-1&&e.pos<=n.currPos+1?i[e.pos]=e:e&&(h.fancybox.stop(e.$slide),e.$slide.off().remove())}),n.slides=i),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),e.opts.video.autoStart&&e.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),e.opts.autoFocus&&"html"===e.contentType&&((t=e.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):n.focus(null,!0)),e.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,n,i=this;i.group.length<2||(n=i.slides[i.currPos+1],(e=i.slides[i.currPos-1])&&e.type===t&&i.loadSlide(e),n&&n.type===t&&i.loadSlide(n))},focus:function(t,e){var n=this,i=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");n.isClosing||((e=(e=!t&&n.current&&n.current.isComplete?n.current.$slide.find("*:visible"+(e?":not(.fancybox-close-small)":"")):n.$refs.container.find("*:visible")).filter(i).filter(function(){return"hidden"!==h(this).css("visibility")&&!h(this).hasClass("disabled")})).length?(i=e.index(r.activeElement),t&&t.shiftKey?(i<0||0==i)&&(t.preventDefault(),e.eq(e.length-1).trigger("focus")):(i<0||i==e.length-1)&&(t&&t.preventDefault(),e.eq(0).trigger("focus"))):n.$refs.container.trigger("focus"))},activate:function(){var e=this;h(".fancybox-container").each(function(){var t=h(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(t,e){function n(){l.cleanUp(t)}var i,o,s,r,a,l=this,c=l.current;return!l.isClosing&&(!(l.isClosing=!0)===l.trigger("beforeClose",t)?(l.isClosing=!1,d(function(){l.update()}),!1):(l.removeEvents(),s=c.$content,i=c.opts.animationEffect,o=h.isNumeric(e)?e:i?c.opts.animationDuration:0,c.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?h.fancybox.stop(c.$slide):i=!1,c.$slide.siblings().trigger("onReset").remove(),o&&l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",o+"ms"),l.hideLoading(c),l.hideControls(!0),l.updateCursor(),"zoom"!==i||s&&o&&"image"===c.type&&!l.isMoved()&&!c.hasError&&(a=l.getThumbPos(c))||(i="fade"),"zoom"===i?(h.fancybox.stop(s),e={top:(r=h.fancybox.getTranslate(s)).top,left:r.left,scaleX:r.width/a.width,scaleY:r.height/a.height,width:a.width,height:a.height},"auto"==(r=c.opts.zoomOpacity)&&(r=.1<Math.abs(c.width/c.height-a.width/a.height)),r&&(a.opacity=0),h.fancybox.setTranslate(s,e),p(s),h.fancybox.animate(s,a,o,n)):i&&o?h.fancybox.animate(c.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,o,n):!0===t?setTimeout(n,o):n(),!0))},cleanUp:function(t){var e,n=this,i=n.current.opts.$orig;n.current.$slide.trigger("onReset"),n.$refs.container.empty().remove(),n.trigger("afterClose",t),n.current.opts.backFocus&&(i&&i.length&&i.is(":visible")||(i=n.$trigger),i&&i.length&&(e=l.scrollX,t=l.scrollY,i.trigger("focus"),h("html, body").scrollTop(t).scrollLeft(e))),n.current=null,(n=h.fancybox.getInstance())?n.activate():(h("body").removeClass("fancybox-active compensate-for-scrollbar"),h("#fancybox-style-noscroll").remove())},trigger:function(t,e){var n,i=Array.prototype.slice.call(arguments,1),o=this,e=e&&e.opts?e:o.current;if(e?i.unshift(e):e=o,i.unshift(o),h.isFunction(e.opts[t])&&(n=e.opts[t].apply(e,i)),!1===n)return n;("afterClose"!==t&&o.$refs?o.$refs.container:s).trigger(t+".fb",i)},updateControls:function(){var t=this,e=t.current,n=e.index,i=t.$refs.container,o=t.$refs.caption,s=e.opts.caption;e.$slide.trigger("refresh"),s&&s.length?(t.$caption=o).children().eq(0).html(s):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),i.find("[data-fancybox-count]").html(t.group.length),i.find("[data-fancybox-index]").html(n+1),i.find("[data-fancybox-prev]").prop("disabled",!e.opts.loop&&n<=0),i.find("[data-fancybox-next]").prop("disabled",!e.opts.loop&&n>=t.group.length-1),"image"===e.type?i.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",e.opts.image.src||e.src).show():e.opts.toolbar&&i.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),h(r.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this,e=(t.current||t).opts,n=t.$refs.container;t.hasHiddenControls=!1,t.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&1<t.group.length)).toggleClass("fancybox-show-caption",!!t.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&1<t.group.length)).toggleClass("fancybox-is-modal",!!e.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),h.fancybox={version:"3.5.7",defaults:t,getInstance:function(t){var e=h('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return e instanceof i&&("string"===h.type(t)?e[t].apply(e,n):"function"===h.type(t)&&t.apply(e,n),e)},open:function(t,e,n){return new i(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),s.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(t=r.createElement("div"),l.getComputedStyle&&l.getComputedStyle(t)&&l.getComputedStyle(t).getPropertyValue("transform")&&!(r.documentMode&&r.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var n="",i={};if(t&&e)return e.left===g&&e.top===g||(n=(e.left===g?t.position():e).left+"px, "+(e.top===g?t.position():e).top+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),e.scaleX!==g&&e.scaleY!==g?n+=" scale("+e.scaleX+", "+e.scaleY+")":e.scaleX!==g&&(n+=" scaleX("+e.scaleX+")"),n.length&&(i.transform=n),e.opacity!==g&&(i.opacity=e.opacity),e.width!==g&&(i.width=e.width),e.height!==g&&(i.height=e.height),t.css(i)},animate:function(e,n,i,o,s){var r,a=this;h.isFunction(i)&&(o=i,i=null),a.stop(e),r=a.getTranslate(e),e.on(c,function(t){t&&t.originalEvent&&(!e.is(t.originalEvent.target)||"z-index"==t.originalEvent.propertyName)||(a.stop(e),h.isNumeric(i)&&e.css("transition-duration",""),h.isPlainObject(n)?n.scaleX!==g&&n.scaleY!==g&&a.setTranslate(e,{top:n.top,left:n.left,width:r.width*n.scaleX,height:r.height*n.scaleY,scaleX:1,scaleY:1}):!0!==s&&e.removeClass(n),h.isFunction(o)&&o(t))}),h.isNumeric(i)&&e.css("transition-duration",i+"ms"),h.isPlainObject(n)?(n.scaleX!==g&&n.scaleY!==g&&(delete n.width,delete n.height,e.parent().hasClass("fancybox-slide--image")&&e.parent().addClass("fancybox-is-scaling")),h.fancybox.setTranslate(e,n)):e.addClass(n),e.data("timer",setTimeout(function(){e.trigger(c)},i+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(c),t.off(c).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},h.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?h("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},v):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},v),this},s.on("click.fb-start","[data-fancybox]",v),s.on("click.fb-start","[data-fancybox-trigger]",function(t){h('[data-fancybox="'+h(this).attr("data-fancybox-trigger")+'"]').eq(h(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:h(this)})}),n=".fancybox-button",f="fancybox-focus",m=null,s.on("mousedown mouseup focus blur",n,function(t){switch(t.type){case"mousedown":m=h(this);break;case"mouseup":m=null;break;case"focusin":h(n).removeClass(f),h(this).is(m)||h(this).is("[disabled]")||h(this).addClass(f);break;case"focusout":h(n).removeClass(f)}})))}(window,document,jQuery),function(f){"use strict";function h(n,t,e){if(n)return e=e||"","object"===f.type(e)&&(e=f.param(e,!0)),f.each(t,function(t,e){n=n.replace("$"+t,e||"")}),e.length&&(n+=(0<n.indexOf("?")?"&":"?")+e),n}var i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&0<t[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};f(document).on("objectNeedsType.fb",function(t,e,o){var s,r,a,l,c,d,u=o.src||"",p=!1,n=f.extend(!0,{},i,o.opts.media);f.each(n,function(t,e){if(r=u.match(e.matcher)){if(p=e.type,d=t,c={},e.paramPlace&&r[e.paramPlace]){"?"==(l=r[e.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var n=0;n<l.length;++n){var i=l[n].split("=",2);2==i.length&&(c[i[0]]=decodeURIComponent(i[1].replace(/\+/g," ")))}}return a=f.extend(!0,{},e.params,o.opts[t],c),u="function"===f.type(e.url)?e.url.call(this,r,a,o):h(e.url,r,a),s="function"===f.type(e.thumb)?e.thumb.call(this,r,a,o):h(e.thumb,r),"youtube"===t?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))}):"vimeo"===t&&(u=u.replace("&%23","#")),!1}}),p?(o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===p&&(o.opts=f.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),f.extend(o,{type:p,src:u,origSrc:o.src,contentSource:d,contentType:"image"===p?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(o.type=o.opts.defaultType)});var o={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,n=this;this[t].loaded?setTimeout(function(){n.done(t)}):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){n[t].loaded=!0,n.done(t)}:e.onload=function(){n[t].loaded=!0,n.done(t)},document.body.appendChild(e))},done:function(t){var e,n;"youtube"===t&&delete window.onYouTubeIframeAPIReady,(e=f.fancybox.getInstance())&&(n=e.current.$content.find("iframe"),"youtube"===t&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(t){0==t.data&&e.next()}}}):"vimeo"===t&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){e.next()}))}};f(document).on({"afterShow.fb":function(t,e,n){1<e.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&o.load(n.contentSource)}})}(jQuery),function(d,l,u){"use strict";function p(t){var e,n=[];for(e in t=(t=t.originalEvent||t||d.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t])t[e].pageX?n.push({x:t[e].pageX,y:t[e].pageY}):t[e].clientX&&n.push({x:t[e].clientX,y:t[e].clientY});return n}function f(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0}function c(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||u.isFunction(t.get(0).onclick)||t.data("selectable"))return 1;for(var e=0,n=t[0].attributes,i=n.length;e<i;e++)if("data-fancybox-"===n[e].nodeName.substr(0,14))return 1}function h(t){for(var e,n,i,o=!1;e=t.get(0),n=i=n=void 0,n=d.getComputedStyle(e)["overflow-y"],i=d.getComputedStyle(e)["overflow-x"],n=("scroll"===n||"auto"===n)&&e.scrollHeight>e.clientHeight,e=("scroll"===i||"auto"===i)&&e.scrollWidth>e.clientWidth,!(o=n||e)&&(t=t.parent()).length&&!t.hasClass("fancybox-stage")&&!t.is("body"););return o}function n(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",u.proxy(e,"ontouchstart"))}var g=d.requestAnimationFrame||d.webkitRequestAnimationFrame||d.mozRequestAnimationFrame||d.oRequestAnimationFrame||function(t){return d.setTimeout(t,1e3/60)},m=d.cancelAnimationFrame||d.webkitCancelAnimationFrame||d.mozCancelAnimationFrame||d.oCancelAnimationFrame||function(t){d.clearTimeout(t)};n.prototype.destroy=function(){var t=this;t.$container.off(".fb.touch"),u(l).off(".fb.touch"),t.requestId&&(m(t.requestId),t.requestId=null),t.tapped&&(clearTimeout(t.tapped),t.tapped=null)},n.prototype.ontouchstart=function(t){var e=this,n=u(t.target),i=e.instance,o=i.current,s=o.$slide,r=o.$content,a="touchstart"==t.type;if(a&&e.$container.off("mousedown.fb.touch"),(!t.originalEvent||2!=t.originalEvent.button)&&s.length&&n.length&&!c(n)&&!c(n.parent())&&(n.is("img")||!(t.originalEvent.clientX>n[0].clientWidth+n.offset().left))){if(!o||i.isAnimating||o.$slide.hasClass("fancybox-animated"))return t.stopPropagation(),void t.preventDefault();e.realPoints=e.startPoints=p(t),e.startPoints.length&&(o.touch&&t.stopPropagation(),e.startEvent=t,e.canTap=!0,e.$target=n,e.$content=r,e.opts=o.opts.touch,e.isPanning=!1,e.isSwiping=!1,e.isZooming=!1,e.isScrolling=!1,e.canPan=i.canPan(),e.startTime=(new Date).getTime(),e.distanceX=e.distanceY=e.distance=0,e.canvasWidth=Math.round(s[0].clientWidth),e.canvasHeight=Math.round(s[0].clientHeight),e.contentLastPos=null,e.contentStartPos=u.fancybox.getTranslate(e.$content)||{top:0,left:0},e.sliderStartPos=u.fancybox.getTranslate(s),e.stagePos=u.fancybox.getTranslate(i.$refs.stage),e.sliderStartPos.top-=e.stagePos.top,e.sliderStartPos.left-=e.stagePos.left,e.contentStartPos.top-=e.stagePos.top,e.contentStartPos.left-=e.stagePos.left,u(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",u.proxy(e,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",u.proxy(e,"ontouchmove")),u.fancybox.isMobile&&l.addEventListener("scroll",e.onscroll,!0),((e.opts||e.canPan)&&(n.is(e.$stage)||e.$stage.find(n).length)||(n.is(".fancybox-image")&&t.preventDefault(),u.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(e.isScrollable=h(n)||h(n.parent()),u.fancybox.isMobile&&e.isScrollable||t.preventDefault(),1!==e.startPoints.length&&!o.hasError||(e.canPan?(u.fancybox.stop(e.$content),e.isPanning=!0):e.isSwiping=!0,e.$container.addClass("fancybox-is-grabbing")),2===e.startPoints.length&&"image"===o.type&&(o.isLoaded||o.$ghost)&&(e.canTap=!1,e.isSwiping=!1,e.isPanning=!1,e.isZooming=!0,u.fancybox.stop(e.$content),e.centerPointStartX=.5*(e.startPoints[0].x+e.startPoints[1].x)-u(d).scrollLeft(),e.centerPointStartY=.5*(e.startPoints[0].y+e.startPoints[1].y)-u(d).scrollTop(),e.percentageOfImageAtPinchPointX=(e.centerPointStartX-e.contentStartPos.left)/e.contentStartPos.width,e.percentageOfImageAtPinchPointY=(e.centerPointStartY-e.contentStartPos.top)/e.contentStartPos.height,e.startDistanceBetweenFingers=f(e.startPoints[0],e.startPoints[1]))))}},n.prototype.onscroll=function(t){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(t){var e=this;void 0===t.originalEvent.buttons||0!==t.originalEvent.buttons?e.isScrolling?e.canTap=!1:(e.newPoints=p(t),(e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=f(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=f(e.newPoints[0],e.startPoints[0],"y"),e.distance=f(e.newPoints[0],e.startPoints[0]),0<e.distance&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))):e.ontouchend(t)},n.prototype.onSwipe=function(t){var o=this,s=o.instance,e=o.isSwiping,n=o.sliderStartPos.left||0;if(!0!==e)"x"==e&&(0<o.distanceX&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?n+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?n-=Math.pow(-o.distanceX,.8):n+=o.distanceX),o.sliderLastPos={top:"x"==e?0:o.sliderStartPos.top+o.distanceY,left:n},o.requestId&&(m(o.requestId),o.requestId=null),o.requestId=g(function(){o.sliderLastPos&&(u.each(o.instance.slides,function(t,e){var n=e.pos-o.instance.currPos;u.fancybox.setTranslate(e.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+n*o.canvasWidth+n*e.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(o.distance)){if(o.canTap=!1,s.group.length<2&&o.opts.vertical?o.isSwiping="y":s.isDragging||!1===o.opts.vertical||"auto"===o.opts.vertical&&800<u(d).width()?o.isSwiping="x":(n=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=45<n&&n<135?"y":"x"),"y"===o.isSwiping&&u.fancybox.isMobile&&o.isScrollable)return void(o.isScrolling=!0);s.isDragging=o.isSwiping,o.startPoints=o.newPoints,u.each(s.slides,function(t,e){var n,i;u.fancybox.stop(e.$slide),n=u.fancybox.getTranslate(e.$slide),i=u.fancybox.getTranslate(s.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===s.current.pos&&(o.sliderStartPos.top=n.top-i.top,o.sliderStartPos.left=n.left-i.left),u.fancybox.setTranslate(e.$slide,{top:n.top-i.top,left:n.left-i.left})}),s.SlideShow&&s.SlideShow.isActive&&s.SlideShow.stop()}},n.prototype.onPan=function(){var t=this;f(t.newPoints[0],t.realPoints[0])<(u.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&m(t.requestId),t.requestId=g(function(){u.fancybox.setTranslate(t.$content,t.contentLastPos)}))},n.prototype.limitMovement=function(){var t=this,e=t.canvasWidth,n=t.canvasHeight,i=t.distanceX,o=t.distanceY,s=t.contentStartPos,r=s.left,a=s.top,l=s.width,c=s.height,d=e<l?r+i:r,u=a+o,t=Math.max(0,.5*e-.5*l),s=Math.max(0,.5*n-.5*c),l=Math.min(e-l,.5*e-.5*l),c=Math.min(n-c,.5*n-.5*c);return 0<i&&t<d&&(d=t-1+Math.pow(-t+r+i,.8)||0),i<0&&d<l&&(d=l+1-Math.pow(l-r-i,.8)||0),0<o&&s<u&&(u=s-1+Math.pow(-s+a+o,.8)||0),o<0&&u<c&&(u=c+1-Math.pow(c-a-o,.8)||0),{top:u,left:d}},n.prototype.limitPosition=function(t,e,n,i){var o=this.canvasWidth,s=this.canvasHeight;return t=o<n?(t=0<t?0:t)<o-n?o-n:t:Math.max(0,o/2-n/2),{top:e=s<i?(e=0<e?0:e)<s-i?s-i:e:Math.max(0,s/2-i/2),left:t}},n.prototype.onZoom=function(){var t=this,e=t.contentStartPos,n=e.width,i=e.height,o=e.left,s=e.top,r=f(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,a=Math.floor(n*r),l=Math.floor(i*r),c=(n-a)*t.percentageOfImageAtPinchPointX,e=(i-l)*t.percentageOfImageAtPinchPointY,n=(t.newPoints[0].x+t.newPoints[1].x)/2-u(d).scrollLeft(),i=(t.newPoints[0].y+t.newPoints[1].y)/2-u(d).scrollTop(),n=n-t.centerPointStartX,r={top:s+(e+(i-t.centerPointStartY)),left:o+(c+n),scaleX:r,scaleY:r};t.canTap=!1,t.newWidth=a,t.newHeight=l,t.contentLastPos=r,t.requestId&&m(t.requestId),t.requestId=g(function(){u.fancybox.setTranslate(t.$content,t.contentLastPos)})},n.prototype.ontouchend=function(t){var e=this,n=e.isSwiping,i=e.isPanning,o=e.isZooming,s=e.isScrolling;if(e.endPoints=p(t),e.dMs=Math.max((new Date).getTime()-e.startTime,1),e.$container.removeClass("fancybox-is-grabbing"),u(l).off(".fb.touch"),l.removeEventListener("scroll",e.onscroll,!0),e.requestId&&(m(e.requestId),e.requestId=null),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.isScrolling=!1,e.instance.isDragging=!1,e.canTap)return e.onTap(t);e.speed=100,e.velocityX=e.distanceX/e.dMs*.5,e.velocityY=e.distanceY/e.dMs*.5,i?e.endPanning():o?e.endZooming():e.endSwiping(n,s)},n.prototype.endSwiping=function(t,e){var n=this,i=!1,o=n.instance.group.length,s=Math.abs(n.distanceX),s="x"==t&&1<o&&(130<n.dMs&&10<s||50<s);n.sliderLastPos=null,"y"==t&&!e&&50<Math.abs(n.distanceY)?(u.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),i=n.instance.close(!0,250)):s&&0<n.distanceX?i=n.instance.previous(300):s&&n.distanceX<0&&(i=n.instance.next(300)),!1!==i||"x"!=t&&"y"!=t||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var t,e,n=this;n.contentLastPos&&(e=!1===n.opts.momentum||350<n.dMs?(t=n.contentLastPos.left,n.contentLastPos.top):(t=n.contentLastPos.left+500*n.velocityX,n.contentLastPos.top+500*n.velocityY),(e=n.limitPosition(t,e,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,e.height=n.contentStartPos.height,u.fancybox.animate(n.$content,e,366))},n.prototype.endZooming=function(){var t,e,n,i=this,o=i.instance.current,s=i.newWidth,r=i.newHeight;i.contentLastPos&&(t=i.contentLastPos.left,n={top:e=i.contentLastPos.top,left:t,width:s,height:r,scaleX:1,scaleY:1},u.fancybox.setTranslate(i.$content,n),s<i.canvasWidth&&r<i.canvasHeight?i.instance.scaleToFit(150):s>o.width||r>o.height?i.instance.scaleToActual(i.centerPointStartX,i.centerPointStartY,150):(r=i.limitPosition(t,e,s,r),u.fancybox.animate(i.$content,r,150)))},n.prototype.onTap=function(e){function t(t){if(t=r.opts[t],u.isFunction(t)&&(t=t.apply(s,[r,e])),t)switch(t){case"close":s.close(i.startEvent);break;case"toggleControls":s.toggleControls();break;case"next":s.next();break;case"nextOrClose":1<s.group.length?s.next():s.close(i.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,c):s.group.length<2&&s.close(i.startEvent))}}var n,i=this,o=u(e.target),s=i.instance,r=s.current,a=e&&p(e)||i.startPoints,l=a[0]?a[0].x-u(d).scrollLeft()-i.stagePos.left:0,c=a[0]?a[0].y-u(d).scrollTop()-i.stagePos.top:0;if((!e.originalEvent||2!=e.originalEvent.button)&&(o.is("img")||!(l>o[0].clientWidth+o.offset().left))){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))n="Outside";else if(o.is(".fancybox-slide"))n="Slide";else{if(!s.current.$content||!s.current.$content.find(o).addBack().filter(o).length)return;n="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,50<Math.abs(l-i.tapX)||50<Math.abs(c-i.tapY))return this;t("dblclick"+n)}else i.tapX=l,i.tapY=c,r.opts["dblclick"+n]&&r.opts["dblclick"+n]!==r.opts["click"+n]?i.tapped=setTimeout(function(){i.tapped=null,s.isAnimating||t("click"+n)},500):t("click"+n);return this}},u(l).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new n(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(s,r){"use strict";function n(t){this.instance=t,this.init()}r.extend(!0,r.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}}),r.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,e=t.instance,n=e.group[e.currIndex].opts.slideShow;t.$button=e.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),e.group.length<2||!n?t.$button.hide():n.progress&&(t.$progress=r('<div class="fancybox-progress"></div>').appendTo(e.$refs.inner))},set:function(t){var e=this,n=e.instance,i=n.current;i&&(!0===t||i.opts.loop||n.currIndex<n.group.length-1)?e.isActive&&"video"!==i.contentType&&(e.$progress&&r.fancybox.animate(e.$progress.show(),{scaleX:1},i.opts.slideShow.speed),e.timer=setTimeout(function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)},i.opts.slideShow.speed)):(e.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this,e=t.instance.current;e&&(t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),t.isActive=!0,e.isComplete&&t.set(!0),t.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),t.isActive=!1,t.instance.trigger("onSlideShowChange",!1),t.$progress&&t.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),r(s).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,i){e=e&&e.SlideShow;i?e&&n.opts.slideShow.autoStart&&e.start():e&&e.isActive&&e.clear()},"afterShow.fb":function(t,e,n){e=e&&e.SlideShow;e&&e.isActive&&e.set()},"afterKeydown.fb":function(t,e,n,i,o){e=e&&e.SlideShow;!e||!n.opts.slideShow||80!==o&&32!==o||r(s.activeElement).is("button,a,input")||(i.preventDefault(),e.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){e=e&&e.SlideShow;e&&e.stop()}}),r(s).on("visibilitychange",function(){var t=r.fancybox.getInstance(),t=t&&t.SlideShow;t&&t.isActive&&(s.hidden?t.clear():t.set())})}(document,jQuery),function(s,n){"use strict";var i,o=function(){for(var t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],e={},n=0;n<t.length;n++){var i=t[n];if(i&&i[1]in s){for(var o=0;o<i.length;o++)e[t[0][o]]=i[o];return e}}return!1}();o&&(i={request:function(t){(t=t||s.documentElement)[o.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){s[o.exitFullscreen]()},toggle:function(t){t=t||s.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(s[o.fullscreenElement])},enabled:function(){return Boolean(s[o.fullscreenEnabled])}},n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),n(s).on(o.fullscreenchange,function(){var t=i.isFullscreen(),e=n.fancybox.getInstance();e&&(e.current&&"image"===e.current.type&&e.isAnimating&&(e.isAnimating=!1,e.update(!0,!0,0),e.isComplete||e.complete()),e.trigger("onFullscreenChange",t),e.$refs.container.toggleClass("fancybox-is-fullscreen",t),e.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})),n(s).on({"onInit.fb":function(t,e){o?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),i.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&i.request(),e.FullScreen=i):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,n,i,o){e&&e.FullScreen&&70===o&&(i.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(t,s){"use strict";var r="fancybox-thumbs",a=r+"-active";function i(t){this.init(t)}s.fancybox.defaults=s.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},s.fancybox.defaults),s.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,n=t.group,i=0;e.instance=t,e.opts=n[t.currIndex].opts.thumbs,(t.Thumbs=e).$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var o=0,s=n.length;o<s&&(n[o].thumb&&i++,!(1<i));o++);1<i&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var n,t=this,e=t.instance,i=t.opts.parentEl,o=[];t.$grid||(t.$grid=s('<div class="'+r+" "+r+"-"+t.opts.axis+'"></div>').appendTo(e.$refs.container.find(i).addBack().filter(i)),t.$grid.on("click","a",function(){e.jumpTo(s(this).attr("data-index"))})),t.$list||(t.$list=s('<div class="'+r+'__list">').appendTo(t.$grid)),s.each(e.group,function(t,e){(n=e.thumb)||"image"!==e.type||(n=e.src),o.push('<a href="javascript:;" tabindex="0" data-index="'+t+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),t.$list[0].innerHTML=o.join(""),"x"===t.opts.axis&&t.$list.width(parseInt(t.$grid.css("padding-right"),10)+e.group.length*t.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,n,i=this.$list,o=this.$grid;this.instance.current&&(n=(e=i.children().removeClass(a).filter('[data-index="'+this.instance.current.index+'"]').addClass(a)).position(),"y"===this.opts.axis&&(n.top<0||n.top>i.height()-e.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},t):"x"===this.opts.axis&&(n.left<o.scrollLeft()||n.left>o.scrollLeft()+(o.width()-e.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},t))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),s(t).on({"onInit.fb":function(t,e){var n;e&&!e.Thumbs&&(n=new i(e)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(t,e,n,i){e=e&&e.Thumbs;e&&e.isVisible&&e.focus(i?0:250)},"afterKeydown.fb":function(t,e,n,i,o){e=e&&e.Thumbs;e&&e.isActive&&71===o&&(i.preventDefault(),e.toggle())},"beforeClose.fb":function(t,e){e=e&&e.Thumbs;e&&e.isVisible&&!1!==e.opts.hideOnClose&&e.$grid.hide()}})}(document,jQuery),function(t,o){"use strict";o.extend(!0,o.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),o(t).on("click","[data-fancybox-share]",function(){var t,e,n=o.fancybox.getInstance(),i=n.current||null;i&&("function"===o.type(i.opts.share.url)&&(t=i.opts.share.url.apply(i,[n,i])),t=i.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===i.type?encodeURIComponent(i.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(t).replace(/[&<>"'`=\/]/g,function(t){return e[t]}))).replace(/\{\{descr\}\}/g,n.$caption?encodeURIComponent(n.$caption.text()):""),o.fancybox.open({src:n.translate(n,t),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){n.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(s,r,i){"use strict";function o(){var t=s.location.hash.substr(1),e=t.split("-"),n=1<e.length&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||1;return{hash:t,index:n<1?1:n,gallery:e.join("-")}}function e(t){""!==t.gallery&&i("[data-fancybox='"+i.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function a(t){return!!t&&(""!==(t=(t=(t.current||t).opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&t)}i.escapeSelector||(i.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),i(function(){!1!==i.fancybox.defaults.hash&&(i(r).on({"onInit.fb":function(t,e){var n,i;!1!==e.group[e.currIndex].opts.hash&&(n=o(),(i=a(e))&&n.gallery&&i==n.gallery&&(e.currIndex=n.index-1))},"beforeShow.fb":function(t,e,n,i){var o;n&&!1!==n.opts.hash&&(o=a(e))&&(e.currentHash=o+(1<e.group.length?"-"+(n.index+1):""),s.location.hash!=="#"+e.currentHash&&(i&&!e.origHash&&(e.origHash=s.location.hash),e.hashTimer&&clearTimeout(e.hashTimer),e.hashTimer=setTimeout(function(){"replaceState"in s.history?(s.history[i?"pushState":"replaceState"]({},r.title,s.location.pathname+s.location.search+"#"+e.currentHash),i&&(e.hasCreatedHistory=!0)):s.location.hash=e.currentHash,e.hashTimer=null},300)))},"beforeClose.fb":function(t,e,n){n&&!1!==n.opts.hash&&(clearTimeout(e.hashTimer),e.currentHash&&e.hasCreatedHistory?s.history.back():e.currentHash&&("replaceState"in s.history?s.history.replaceState({},r.title,s.location.pathname+s.location.search+(e.origHash||"")):s.location.hash=e.origHash),e.currentHash=null)}}),i(s).on("hashchange.fb",function(){var t=o(),n=null;i.each(i(".fancybox-container").get().reverse(),function(t,e){e=i(e).data("FancyBox");if(e&&e.currentHash)return n=e,!1}),n?n.currentHash===t.gallery+"-"+t.index||1===t.index&&n.currentHash==t.gallery||(n.currentHash=null,n.close()):""!==t.gallery&&e(t)}),setTimeout(function(){i.fancybox.getInstance()||e(o())},50))})}(window,document,jQuery),function(t,e){"use strict";var o=(new Date).getTime();e(t).on({"onInit.fb":function(t,i,e){i.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var e=i.current,n=(new Date).getTime();i.group.length<2||!1===e.opts.wheel||"auto"===e.opts.wheel&&"image"!==e.type||(t.preventDefault(),t.stopPropagation(),e.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,n-o<250||(o=n,i[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t($||require("jquery")):t(jQuery)}(function(N){"use strict";var o="styler",n={idSuffix:"-styler",filePlaceholder:"Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½",fileBrowse:"ÐÐ±Ð·Ð¾Ñ...",fileNumber:"ÐÑÐ±ÑÐ°Ð½Ð¾ ÑÐ°Ð¹Ð»Ð¾Ð²: %s",selectPlaceholder:"ÐÑÐ±ÐµÑÐ¸ÑÐµ...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Ð¡Ð¾Ð²Ð¿Ð°Ð´ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾",selectSearchPlaceholder:"ÐÐ¾Ð¸ÑÐº...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};function s(t,e){this.element=t,this.options=N.extend({},n,e);e=this.options.locale;void 0!==this.options.locales[e]&&N.extend(this.options,this.options.locales[e]),this.init()}function M(t){var e,n;N(t.target).parents().hasClass("jq-selectbox")||"OPTION"==t.target.nodeName||N("div.jq-selectbox.opened").length&&(e=N("div.jq-selectbox.opened"),n=N("div.jq-selectbox__search input",e),t=N("div.jq-selectbox__dropdown",e),e.find("select").data("_"+o).options.onSelectClosed.call(e),n.length&&n.val("").keyup(),t.hide().find("li.sel").addClass("selected"),e.removeClass("focused opened dropup dropdown"))}s.prototype={init:function(){var t,e,n,i,o,P=N(this.element),$=this.options,O=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),s=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));function I(){void 0!==P.attr("id")&&""!==P.attr("id")&&(this.id=P.attr("id")+$.idSuffix),this.title=P.attr("title"),this.classes=P.attr("class"),this.data=P.data()}P.is(":checkbox")?((t=function(){var t=new I,e=N('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);P.after(e).prependTo(e),P.is(":checked")&&e.addClass("checked"),P.is(":disabled")&&e.addClass("disabled"),e.click(function(t){t.preventDefault(),P.triggerHandler("click"),e.is(".disabled")||(P.is(":checked")?(P.prop("checked",!1),e.removeClass("checked")):(P.prop("checked",!0),e.addClass("checked")),P.focus().change())}),P.closest("label").add('label[for="'+P.attr("id")+'"]').on("click.styler",function(t){N(t.target).is("a")||N(t.target).closest(e).length||(e.triggerHandler("click"),t.preventDefault())}),P.on("change.styler",function(){P.is(":checked")?e.addClass("checked"):e.removeClass("checked")}).on("keydown.styler",function(t){32==t.which&&e.click()}).on("focus.styler",function(){e.is(".disabled")||e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")})})(),P.on("refresh",function(){P.closest("label").add('label[for="'+P.attr("id")+'"]').off(".styler"),P.off(".styler").parent().before(P).remove(),t()})):P.is(":radio")?((e=function(){var t=new I,e=N('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);P.after(e).prependTo(e),P.is(":checked")&&e.addClass("checked"),P.is(":disabled")&&e.addClass("disabled"),N.fn.commonParents=function(){var t=this;return t.first().parents().filter(function(){return N(this).find(t).length===t.length})},N.fn.commonParent=function(){return N(this).commonParents().first()},e.click(function(t){t.preventDefault(),P.triggerHandler("click"),e.is(".disabled")||((t=N('input[name="'+P.attr("name")+'"]')).commonParent().find(t).prop("checked",!1).parent().removeClass("checked"),P.prop("checked",!0).parent().addClass("checked"),P.focus().change())}),P.closest("label").add('label[for="'+P.attr("id")+'"]').on("click.styler",function(t){N(t.target).is("a")||N(t.target).closest(e).length||(e.triggerHandler("click"),t.preventDefault())}),P.on("change.styler",function(){P.parent().addClass("checked")}).on("focus.styler",function(){e.is(".disabled")||e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")})})(),P.on("refresh",function(){P.closest("label").add('label[for="'+P.attr("id")+'"]').off(".styler"),P.off(".styler").parent().before(P).remove(),e()})):P.is(":file")?((n=function(){var t=new I,i=P.data("placeholder");void 0===i&&(i=$.filePlaceholder);var e=P.data("browse");void 0!==e&&""!==e||(e=$.fileBrowse);var o=N('<div class="jq-file"><div class="jq-file__name">'+i+'</div><div class="jq-file__browse">'+e+"</div></div>").attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);P.after(o).appendTo(o),P.is(":disabled")&&o.addClass("disabled");var t=P.val(),s=N("div.jq-file__name",o);t&&s.text(t.replace(/.+[\\\/]/,"")),P.on("change.styler",function(){var t,e,n=P.val();P.is("[multiple]")&&(n="",0<(t=P[0].files.length)&&(void 0===(e=P.data("number"))&&(e=$.fileNumber),n=e=e.replace("%s",t))),s.text(n.replace(/.+[\\\/]/,"")),""===n?(s.text(i),o.removeClass("changed")):o.addClass("changed")}).on("focus.styler",function(){o.addClass("focused")}).on("blur.styler",function(){o.removeClass("focused")}).on("click.styler",function(){o.removeClass("focused")})})(),P.on("refresh",function(){P.off(".styler").parent().before(P).remove(),n()})):P.is('input[type="number"]')?((i=function(){var t=new I,e=N('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);P.after(e).prependTo(e).wrap('<div class="jq-number__field"></div>'),P.is(":disabled")&&e.addClass("disabled");var s,r,a,n=null,i=null;void 0!==P.attr("min")&&(s=P.attr("min")),void 0!==P.attr("max")&&(r=P.attr("max")),a=void 0!==P.attr("step")&&N.isNumeric(P.attr("step"))?Number(P.attr("step")):Number(1);function o(t){var e,n=P.val();N.isNumeric(n)||(n=0,P.val("0")),t.is(".minus")?e=Number(n)-a:t.is(".plus")&&(e=Number(n)+a);var i=(a.toString().split(".")[1]||[]).length;if(0<i){for(var o="1";o.length<=i;)o+="0";e=Math.round(e*o)/o}N.isNumeric(s)&&N.isNumeric(r)?s<=e&&e<=r&&P.val(e):N.isNumeric(s)&&!N.isNumeric(r)?s<=e&&P.val(e):(N.isNumeric(s)||!N.isNumeric(r)||e<=r)&&P.val(e)}e.is(".disabled")||(e.on("mousedown","div.jq-number__spin",function(){var t=N(this);o(t),n=setTimeout(function(){i=setInterval(function(){o(t)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(n),clearInterval(i)}).on("mouseup","div.jq-number__spin",function(){P.change().trigger("input")}),P.on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}))})(),P.on("refresh",function(){P.off(".styler").closest(".jq-number").before(P).remove(),i()})):P.is("select")?((o=function(){function k(e){var n,i,o=e.prop("scrollHeight")-e.outerHeight();e.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(t){n=t.originalEvent.detail<0||0<t.originalEvent.wheelDelta?1:-1,i=e.scrollTop(),(o<=i&&n<0||i<=0&&0<n)&&(t.stopPropagation(),t.preventDefault())})}var A=N("option",P),E="";function D(){for(var t=0;t<A.length;t++){var e=A.eq(t),n="",i="",o="",s="",r="",a="",l="",c="",d="";e.prop("selected")&&(i="selected sel"),e.is(":disabled")&&(i="disabled"),e.is(":selected:disabled")&&(i="selected sel disabled"),void 0!==e.attr("id")&&""!==e.attr("id")&&(s=' id="'+e.attr("id")+$.idSuffix+'"'),void 0!==e.attr("title")&&""!==A.attr("title")&&(r=' title="'+e.attr("title")+'"'),void 0!==e.attr("class")&&(l=" "+e.attr("class"),d=' data-jqfs-class="'+e.attr("class")+'"');var u,p=e.data();for(u in p)""!==p[u]&&(a+=" data-"+u+'="'+p[u]+'"');i+l!==""&&(o=' class="'+i+l+'"'),n="<li"+d+a+o+r+s+">"+e.html()+"</li>",e.parent().is("optgroup")&&(void 0!==e.parent().attr("class")&&(c=" "+e.parent().attr("class")),n="<li"+d+a+' class="'+i+l+" option"+c+'"'+r+s+">"+e.html()+"</li>",e.is(":first-child")&&(n='<li class="optgroup'+c+'">'+e.parent().attr("label")+"</li>"+n)),E+=n}}P.is("[multiple]")?s||O||function(){var t=new I,e=N('<div class="jq-select-multiple jqselect"></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);P.after(e),D(),e.append("<ul>"+E+"</ul>");var n=N("ul",e),o=N("li",e),i=P.attr("size"),t=n.outerHeight(),s=o.outerHeight();void 0!==i&&0<i?n.css({height:s*i}):n.css({height:4*s}),t>e.height()&&(n.css("overflowY","scroll"),k(n),o.filter(".selected").length&&n.scrollTop(n.scrollTop()+o.filter(".selected").position().top)),P.prependTo(e),P.is(":disabled")?(e.addClass("disabled"),A.each(function(){N(this).is(":selected")&&o.eq(N(this).index()).addClass("selected")})):(o.filter(":not(.disabled):not(.optgroup)").click(function(t){P.focus();var e,n,i=N(this);t.ctrlKey||t.metaKey||i.addClass("selected"),t.shiftKey||i.addClass("first"),t.ctrlKey||t.metaKey||t.shiftKey||i.siblings().removeClass("selected first"),(t.ctrlKey||t.metaKey)&&(i.is(".selected")?i.removeClass("selected first"):i.addClass("selected first"),i.siblings().removeClass("first")),t.shiftKey&&(n=e=!1,i.siblings().removeClass("selected").siblings(".first").addClass("selected"),i.prevAll().each(function(){N(this).is(".first")&&(e=!0)}),i.nextAll().each(function(){N(this).is(".first")&&(n=!0)}),e&&i.prevAll().each(function(){return!N(this).is(".selected")&&void N(this).not(".disabled, .optgroup").addClass("selected")}),n&&i.nextAll().each(function(){return!N(this).is(".selected")&&void N(this).not(".disabled, .optgroup").addClass("selected")}),1==o.filter(".selected").length&&i.addClass("first")),A.prop("selected",!1),o.filter(".selected").each(function(){var t=N(this),e=t.index();t.is(".option")&&(e-=t.prevAll(".optgroup").length),A.eq(e).prop("selected",!0)}),P.change()}),A.each(function(t){N(this).data("optionIndex",t)}),P.on("change.styler",function(){o.removeClass("selected");var e=[];A.filter(":selected").each(function(){e.push(N(this).data("optionIndex"))}),o.not(".optgroup").filter(function(t){return-1<N.inArray(t,e)}).addClass("selected")}).on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}),t>e.height()&&P.on("keydown.styler",function(t){38!=t.which&&37!=t.which&&33!=t.which||n.scrollTop(n.scrollTop()+o.filter(".selected").position().top-s),40!=t.which&&39!=t.which&&34!=t.which||n.scrollTop(n.scrollTop()+o.filter(".selected:last").position().top-n.innerHeight()+2*s)}))}():function(){var t=new I,e="",n=P.data("placeholder"),i=P.data("search"),o=P.data("search-limit"),s=P.data("search-not-found"),r=P.data("search-placeholder"),l=P.data("smart-positioning");void 0===n&&(n=$.selectPlaceholder),void 0!==i&&""!==i||(i=$.selectSearch),void 0!==o&&""!==o||(o=$.selectSearchLimit),void 0!==s&&""!==s||(s=$.selectSearchNotFound),void 0===r&&(r=$.selectSearchPlaceholder),void 0!==l&&""!==l||(l=$.selectSmartPositioning);var c=N('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);P.after(c).prependTo(c);var d=0<(d=c.css("z-index"))?d:1,a=N("div.jq-selectbox__select",c),u=N("div.jq-selectbox__select-text",c),t=A.filter(":selected");D(),i&&(e='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+r+'"></div><div class="jq-selectbox__not-found">'+s+"</div>");var p=N('<div class="jq-selectbox__dropdown">'+e+"<ul>"+E+"</ul></div>");c.append(p);var f=N("ul",p),h=N("li",p),g=N("input",p),m=N("div.jq-selectbox__not-found",p).hide();h.length<o&&g.parent().hide(),""===A.first().text()&&A.first().is(":selected")&&!1!==n?u.text(n).addClass("placeholder"):u.text(t.text());var v=0,y=0;h.css({display:"inline-block"}),h.each(function(){var t=N(this);t.innerWidth()>v&&(v=t.innerWidth(),y=t.width())}),h.css({display:""}),u.is(".placeholder")&&u.width()>v?u.width(u.width()):(b=(S=c.clone().appendTo("body").width("auto")).outerWidth(),S.remove(),b==c.outerWidth()&&u.width(y)),v>c.width()&&p.width(v),""===A.first().text()&&""!==P.data("placeholder")&&h.first().hide();var b,w=c.outerHeight(!0),x=g.parent().outerHeight(!0)||0,C=f.css("max-height"),S=h.filter(".selected");S.length<1&&h.first().addClass("selected sel"),void 0===h.data("li-height")&&(b=h.outerHeight(),!1!==n&&(b=h.eq(1).outerHeight()),h.data("li-height",b));var T=p.css("top");"auto"==p.css("left")&&p.css({left:0}),"auto"==p.css("top")&&(p.css({top:w}),T=w),p.hide(),S.length&&(A.first().text()!=t.text()&&c.addClass("changed"),c.data("jqfs-class",S.data("jqfs-class")),c.addClass(S.data("jqfs-class"))),P.is(":disabled")?c.addClass("disabled"):(a.click(function(){var t,e,n,i,o,s,r;function a(){f.css("max-height",Math.floor((n-t.scrollTop()-20-x)/e)*e)}N("div.jq-selectbox").filter(".opened").length&&$.onSelectClosed.call(N("div.jq-selectbox").filter(".opened")),P.focus(),O||(t=N(window),e=h.data("li-height"),n=c.offset().top,i=t.height()-w-(n-t.scrollTop()),void 0!==(r=P.data("visible-options"))&&""!==r||(r=$.selectVisibleOptions),o=5*e,s=e*r,0<r&&r<6&&(o=s),0===r&&(s="auto"),r=function(){p.height("auto").css({bottom:"auto",top:T});function t(){f.css("max-height",Math.floor((i-20-x)/e)*e)}t(),f.css("max-height",s),"none"!=C&&f.css("max-height",C),i<p.outerHeight()+20&&t()},!0===l||1===l?o+x+20<i?(r(),c.removeClass("dropup").addClass("dropdown")):(p.height("auto").css({top:"auto",bottom:T}),a(),f.css("max-height",s),"none"!=C&&f.css("max-height",C),n-t.scrollTop()-20<p.outerHeight()+20&&a(),c.removeClass("dropdown").addClass("dropup")):!1===l||0===l?o+x+20<i&&(r(),c.removeClass("dropup").addClass("dropdown")):(p.height("auto").css({bottom:"auto",top:T}),f.css("max-height",s),"none"!=C&&f.css("max-height",C)),c.offset().left+p.outerWidth()>t.width()&&p.css({left:"auto",right:0}),N("div.jqselect").css({zIndex:d-1}).removeClass("opened"),c.css({zIndex:d}),p.is(":hidden")?(N("div.jq-selectbox__dropdown:visible").hide(),p.show(),c.addClass("opened focused"),$.onSelectOpened.call(c)):(p.hide(),c.removeClass("opened dropup dropdown"),N("div.jq-selectbox").filter(".opened").length&&$.onSelectClosed.call(c)),g.length&&(g.val("").keyup(),m.hide(),g.keyup(function(){var t=N(this).val();h.each(function(){N(this).html().match(new RegExp(".*?"+t+".*?","i"))?N(this).show():N(this).hide()}),""===A.first().text()&&""!==P.data("placeholder")&&h.first().hide(),h.filter(":visible").length<1?m.show():m.hide()})),h.filter(".selected").length&&(""===P.val()?f.scrollTop(0):(f.innerHeight()/e%2!=0&&(e/=2),f.scrollTop(f.scrollTop()+h.filter(".selected").position().top-f.innerHeight()/2+e))),k(f))}),h.hover(function(){N(this).siblings().removeClass("selected")}),h.filter(".selected").text(),h.filter(":not(.disabled):not(.optgroup)").click(function(){P.focus();var t,e=N(this),n=e.text();e.is(".selected")||(t=e.index(),t-=e.prevAll(".optgroup").length,e.addClass("selected sel").siblings().removeClass("selected sel"),A.prop("selected",!1).eq(t).prop("selected",!0),u.text(n),c.data("jqfs-class")&&c.removeClass(c.data("jqfs-class")),c.data("jqfs-class",e.data("jqfs-class")),c.addClass(e.data("jqfs-class")),P.change()),p.hide(),c.removeClass("opened dropup dropdown"),$.onSelectClosed.call(c)}),p.mouseout(function(){N("li.sel",p).addClass("selected")}),P.on("change.styler",function(){u.text(A.filter(":selected").text()).removeClass("placeholder"),h.removeClass("selected sel").not(".optgroup").eq(P[0].selectedIndex).addClass("selected sel"),A.first().text()!=h.filter(".selected").text()?c.addClass("changed"):c.removeClass("changed")}).on("focus.styler",function(){c.addClass("focused"),N("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){c.removeClass("focused")}).on("keydown.styler keyup.styler",function(t){var e=h.data("li-height");""===P.val()?u.text(n).addClass("placeholder"):u.text(A.filter(":selected").text()),h.removeClass("selected sel").not(".optgroup").eq(P[0].selectedIndex).addClass("selected sel"),38!=t.which&&37!=t.which&&33!=t.which&&36!=t.which||(""===P.val()?f.scrollTop(0):f.scrollTop(f.scrollTop()+h.filter(".selected").position().top)),40!=t.which&&39!=t.which&&34!=t.which&&35!=t.which||f.scrollTop(f.scrollTop()+h.filter(".selected").position().top-f.innerHeight()+e),13==t.which&&(t.preventDefault(),p.hide(),c.removeClass("opened dropup dropdown"),$.onSelectClosed.call(c))}).on("keydown.styler",function(t){32==t.which&&(t.preventDefault(),a.click())}),M.registered||(N(document).on("click",M),M.registered=!0))}()})(),P.on("refresh",function(){P.off(".styler").parent().before(P).remove(),o()})):P.is(":reset")&&P.on("click",function(){setTimeout(function(){P.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var t=N(this.element);t.is(":checkbox")||t.is(":radio")?(t.removeData("_"+o).off(".styler refresh").removeAttr("style").parent().before(t).remove(),t.closest("label").add('label[for="'+t.attr("id")+'"]').off(".styler")):t.is('input[type="number"]')?t.removeData("_"+o).off(".styler refresh").closest(".jq-number").before(t).remove():(t.is(":file")||t.is("select"))&&t.removeData("_"+o).off(".styler refresh").removeAttr("style").parent().before(t).remove()}},N.fn[o]=function(e){var n,i=arguments;return void 0===e||"object"==typeof e?(this.each(function(){N.data(this,"_"+o)||N.data(this,"_"+o,new s(this,e))}).promise().done(function(){var t=N(this[0]).data("_"+o);t&&t.options.onFormStyled.call()}),this):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(this.each(function(){var t=N.data(this,"_"+o);t instanceof s&&"function"==typeof t[e]&&(n=t[e].apply(t,Array.prototype.slice.call(i,1)))}),void 0!==n?n:this):void 0},M.registered=!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
